{"speakers": [], "chunks": [{"timestamp": [0.0, 5.2], "text": " they have always given me the reply,"}, {"timestamp": [5.66, 6.92], "text": " or, I mean, I asked them once,"}, {"timestamp": [7.08, 8.8], "text": " so the only reply they gave me"}, {"timestamp": [8.8, 10.96], "text": " is that they're only interested"}, {"timestamp": [10.96, 13.7], "text": " in doing official finalized"}, {"timestamp": [13.7, 14.64], "text": " Cronus extensions,"}, {"timestamp": [15.32, 17.0], "text": " so not any from any other third party."}, {"timestamp": [17.14, 18.46], "text": " So, like, if we want physics"}, {"timestamp": [18.46, 20.78], "text": " to be implemented in Blender"}, {"timestamp": [20.78, 21.82], "text": " out of the box,"}, {"timestamp": [22.58, 26.24], "text": " like, and we want audio to be implemented in Blender out of the box without and we want audio to be implemented in Blender"}, {"timestamp": [26.24, 28.3], "text": " out of the box without installing any"}, {"timestamp": [28.3, 30.34], "text": " add-ons at all, then the"}, {"timestamp": [30.34, 32.34], "text": " only option is to get"}, {"timestamp": [32.34, 34.26], "text": " it through Chronos, because it's the only way"}, {"timestamp": [34.26, 36.22], "text": " Blender is going to agree to it. Same thing"}, {"timestamp": [36.22, 38.58], "text": " with Unreal Engine. You're going to have to install"}, {"timestamp": [38.58, 40.24], "text": " an add-on"}, {"timestamp": [40.24, 42.26], "text": " or something to get OMI extensions"}, {"timestamp": [42.26, 43.34], "text": " supported in there."}, {"timestamp": [44.1, 47.08], "text": " Which is not necessarily a bad thing,"}, {"timestamp": [47.08, 49.6], "text": " because that allows for independent development."}, {"timestamp": [49.6, 52.62], "text": " And it's not that much work."}, {"timestamp": [52.62, 56.6], "text": " But it is one hurdle that can hurt adoption"}, {"timestamp": [56.6, 59.82], "text": " if people have to seek out something."}, {"timestamp": [59.82, 61.88], "text": " I think, though, Blender users are quite"}, {"timestamp": [61.88, 66.56], "text": " used to installing add-ons same with same with unreal same with"}, {"timestamp": [66.56, 72.66], "text": " you know so i i don't know if you're going to get blender buy-in from my experience"}, {"timestamp": [72.66, 80.62], "text": " contributing to blender it takes it's so slow to get anything changed in a major way and"}, {"timestamp": [80.62, 87.54], "text": " it sounds like they wouldn't do it without official buy-off from chronos right yep i made"}, {"timestamp": [87.54, 93.34], "text": " one pull request to blender and it took months to get merged so yeah i totally get that so and"}, {"timestamp": [93.34, 97.7], "text": " the interesting thing it was only like i was looking through pull requests on blender's il"}, {"timestamp": [97.7, 107.14], "text": " repository and it was only well okay i say it's been four years now okay so it's four years ago but the the true"}, {"timestamp": [107.14, 112.66], "text": " capacity to even extend gltf seems like it wasn't there until 2020 where someone opened an issue and"}, {"timestamp": [112.66, 120.96], "text": " said hey i'm trying to extend gltf and it does not work they fixed it obviously um but now you can"}, {"timestamp": [120.96, 127.1], "text": " you know obviously now you can extend with with theender add-on, extend what gets outputted by the GLTF."}, {"timestamp": [127.36, 129.72], "text": " So, I mean, from my perspective as a game developer,"}, {"timestamp": [129.94, 132.0], "text": " I'm totally happy."}, {"timestamp": [132.2, 135.4], "text": " Like, if plugins can be built to make it happen,"}, {"timestamp": [135.5, 139.36], "text": " then I think that's a great first step."}, {"timestamp": [142.08, 142.56], "text": " Yeah."}, {"timestamp": [143.94, 145.62], "text": " And that's exactly what we're"}, {"timestamp": [145.62, 147.12], "text": " going to be aiming for"}, {"timestamp": [147.12, 150.08], "text": " and just so Ant and"}, {"timestamp": [150.08, 151.74], "text": " Jin know Michael"}, {"timestamp": [151.74, 153.52], "text": " Jared is one of the"}, {"timestamp": [153.52, 155.9], "text": " people that is in a"}, {"timestamp": [155.9, 157.9], "text": " brand new discord server just founded"}, {"timestamp": [157.9, 158.86], "text": " like a week ago"}, {"timestamp": [158.86, 162.04], "text": " where we're trying to get"}, {"timestamp": [162.04, 163.98], "text": " a bunch of people together to implement a"}, {"timestamp": [163.98, 165.26], "text": " blunter to get a bunch of people together to implement a Blender to Github pipeline."}, {"timestamp": [166.28, 170.82], "text": " And through my convincing of them,"}, {"timestamp": [171.24, 173.92], "text": " this will be using GLTF as the foundation."}, {"timestamp": [174.62, 178.88], "text": " And since we already have things like GLTF physics in Github"}, {"timestamp": [178.88, 180.92], "text": " and also audio coming soon,"}, {"timestamp": [181.5, 184.5], "text": " then we can just implement these things as Blender exporters."}, {"timestamp": [184.5, 188.66], "text": " And then you don't have to do anything on the Github side because it'll"}, {"timestamp": [188.66, 190.04], "text": " already import the OMI data."}, {"timestamp": [192.54, 193.02], "text": " Yeah."}, {"timestamp": [193.86, 198.08], "text": " And for just a little bit more context for everyone, I've been working on an"}, {"timestamp": [198.08, 201.64], "text": " independent plugin for almost a year now, actually."}, {"timestamp": [201.82, 202.98], "text": " I sell it on the Blender marketplace."}, {"timestamp": [203.64, 205.16], "text": " Shitloads of people buy it."}, {"timestamp": [206.5, 207.62], "text": " To do that, right?"}, {"timestamp": [207.68, 210.58], "text": " To do this pipelining between Blender and Giddo."}, {"timestamp": [210.58, 216.76], "text": " And my interest was piqued massively"}, {"timestamp": [216.76, 221.24], "text": " when I found Aaron through the other Discord"}, {"timestamp": [221.24, 226.0], "text": " and explained to me that basically,"}, {"timestamp": [226.26, 228.72], "text": " I'm going to paraphrase this, and if I'm butchering,"}, {"timestamp": [228.9, 230.64], "text": " just let me know if I butcher it."}, {"timestamp": [231.06, 234.46], "text": " But basically, we're getting to a point where game entities,"}, {"timestamp": [234.88, 239.68], "text": " in terms of physics, maybe in terms of audio spatial type nodes,"}, {"timestamp": [241.12, 244.34], "text": " this other information is going to be packaged in a standard way"}, {"timestamp": [244.34, 245.3], "text": " in a GLTF file."}, {"timestamp": [246.6, 252.72], "text": " And so whether I develop the plugin or, well, this plugin we're developing now is the end state,"}, {"timestamp": [252.72, 260.7], "text": " it's like having that standard, it's like, for me, that was just like, wow, okay, we're actually at that point."}, {"timestamp": [260.76, 266.16], "text": " I didn't think we were at that point because the data on that I ship now uses a bunch of proprietary"}, {"timestamp": [266.16, 267.74], "text": " custom import instructions."}, {"timestamp": [268.94, 269.86], "text": " There's no"}, {"timestamp": [269.86, 272.2], "text": " intermediate standard"}, {"timestamp": [272.2, 273.74], "text": " that's going to mediate that."}, {"timestamp": [275.18, 276.36], "text": " That's kind of my background."}, {"timestamp": [276.62, 277.78], "text": " I think it's super fascinating."}, {"timestamp": [278.08, 279.82], "text": " I think it's actually really within arm's reach."}, {"timestamp": [280.52, 282.1], "text": " There's a couple technical questions I have"}, {"timestamp": [282.1, 284.3], "text": " I probably won't bug the group with just yet"}, {"timestamp": [284.3, 286.24], "text": " in terms of implementation."}, {"timestamp": [287.44, 290.22], "text": " We would love the group would love it if you bugged it about,"}, {"timestamp": [290.22, 291.82], "text": " about these things."}, {"timestamp": [292.74, 293.1], "text": " Yeah."}, {"timestamp": [293.18, 294.64], "text": " Try to poke holes in it for sure."}, {"timestamp": [296.2, 299.16], "text": " I think I haven't been doing a lot of the coding is another guy who's doing"}, {"timestamp": [299.16, 299.8], "text": " most of the coding."}, {"timestamp": [302.62, 304.36], "text": " It's not going to be an issue with the standard."}, {"timestamp": [304.46, 307.38], "text": " I think the standard, the standard appears very reasonable to me."}, {"timestamp": [307.42, 309.04], "text": " It seems to fit the philosophy of GLTF"}, {"timestamp": [309.04, 311.08], "text": " and the way you've kind of differentiated"}, {"timestamp": [311.08, 313.3], "text": " what nodes are from what resources are"}, {"timestamp": [313.3, 315.74], "text": " and how you index them."}, {"timestamp": [318.22, 322.5], "text": " I guess one thing that I'm hung up on is"}, {"timestamp": [322.5, 327.18], "text": " you have, let's say, a concave collision that you want to generate in Blender, right?"}, {"timestamp": [328.76, 332.9], "text": " Aaron knows exactly what I'm going to say because I've been harping about it for like a week or a few days."}, {"timestamp": [333.46, 339.24], "text": " But internally, Blender is going to have some representation of that object, which has a mesh."}, {"timestamp": [339.88, 353.04], "text": " At export time, it's going to convert that, obviously, a gltf node that has position rotation scale and then you know it could have a material it could have a mesh um actually i"}, {"timestamp": [353.04, 358.24], "text": " might have misspoke there how does it work meshes get materials in gltf or does the node can a node"}, {"timestamp": [358.24, 365.18], "text": " have a material applied i can't remember but in any, that node is going to have a mesh."}, {"timestamp": [367.76, 367.98], "text": " But the problem is, I don't know at which point in the hooks,"}, {"timestamp": [369.38, 369.96], "text": " the export hooks in Blender,"}, {"timestamp": [372.46, 373.06], "text": " that you could actually know what the indices are going to be."}, {"timestamp": [376.32, 376.44], "text": " So it has nothing to do with the OMI standards."}, {"timestamp": [378.54, 380.04], "text": " I don't know if you guys say that, like OMI standards, whatever."}, {"timestamp": [381.42, 384.12], "text": " You can say it either way. You can say OMI, you can say OMI, whatever."}, {"timestamp": [384.6, 384.72], "text": " Yeah."}, {"timestamp": [385.6, 386.24], "text": " OMI, yeah. OMI, yeah."}, {"timestamp": [387.54, 388.82], "text": " The standards are fine."}, {"timestamp": [388.92, 390.9], "text": " It's just like one thing I do work."}, {"timestamp": [391.2, 393.06], "text": " So I do work a lot with standards."}, {"timestamp": [393.34, 394.92], "text": " I'm actually an electrical engineer by trade."}, {"timestamp": [395.16, 399.08], "text": " Did a whole bunch of stuff with the IEEE many, many, many times."}, {"timestamp": [399.32, 401.44], "text": " So I'm very familiar with standards."}, {"timestamp": [403.56, 405.86], "text": " Standards can be perfectly well written, but until"}, {"timestamp": [405.86, 407.9], "text": " you get an implementation that bashes"}, {"timestamp": [407.9, 409.82], "text": " the crap out of it and tests it,"}, {"timestamp": [410.22, 412.04], "text": " do we know if it's"}, {"timestamp": [412.04, 414.04], "text": " bulletproof?"}, {"timestamp": [414.68, 415.68], "text": " I agree completely."}, {"timestamp": [416.0, 417.92], "text": " This is actually something that we've been discussing"}, {"timestamp": [417.92, 420.0], "text": " in detail over the past month with"}, {"timestamp": [420.0, 422.2], "text": " Kronos' proposed interactivity extension"}, {"timestamp": [422.2, 423.58], "text": " because they have"}, {"timestamp": [423.58, 425.2], "text": " written a specification"}, {"timestamp": [425.2, 428.14], "text": " that is incomplete and has no examples"}, {"timestamp": [428.14, 429.32], "text": " and no implementations."}, {"timestamp": [430.38, 432.24], "text": " Excellent. Love it."}, {"timestamp": [433.44, 434.14], "text": " And part"}, {"timestamp": [434.14, 435.64], "text": " of what we do in"}, {"timestamp": [435.64, 436.98], "text": " OMI is"}, {"timestamp": [436.98, 439.74], "text": " we try to at least"}, {"timestamp": [439.74, 441.86], "text": " have some implementations"}, {"timestamp": [441.86, 443.26], "text": " before. We have a stage system."}, {"timestamp": [443.5, 445.88], "text": " Stage 2 says that we have two implementations. We have a stage system where stage two says that we have two"}, {"timestamp": [445.88, 451.8], "text": " implementations we have test assets we have recommended you know things whatever whatever"}, {"timestamp": [451.8, 458.26], "text": " those those uh the bullet list i don't have it in my head but um so those are what we use to to"}, {"timestamp": [458.26, 465.94], "text": " kind of signify that something has progressed along and then stage like something can stop it like stage three stage four and still"}, {"timestamp": [465.94, 472.12], "text": " be a really good um i guess standard well not not completely ratified it's like a chrono standard"}, {"timestamp": [472.12, 477.08], "text": " but something that a lot of people have gathered around and then we use those you can use those"}, {"timestamp": [477.08, 486.56], "text": " as sort of indicators of how safe it is to build around those structures um so that's kind of how we do it here. And then we propose them to Kronos"}, {"timestamp": [486.56, 487.28], "text": " if it's relevant."}, {"timestamp": [489.5, 490.6], "text": " Makes sense to me."}, {"timestamp": [494.5, 496.68], "text": " And most of our stuff is"}, {"timestamp": [496.68, 498.6], "text": " not very"}, {"timestamp": [498.6, 500.62], "text": " far advanced in our staging process"}, {"timestamp": [500.62, 502.22], "text": " because we"}, {"timestamp": [502.22, 504.46], "text": " pretty much the only implementations"}, {"timestamp": [504.46, 506.04], "text": " have been written in Github by me."}, {"timestamp": [506.04, 510.24], "text": " So we need more people to join in and participate in this."}, {"timestamp": [510.24, 514.12], "text": " I don't want to go to Unity, go to Unreal,"}, {"timestamp": [514.12, 516.12], "text": " and write implementations there."}, {"timestamp": [516.12, 518.28], "text": " I would like people using those engines"}, {"timestamp": [518.28, 523.38], "text": " to take it upon themselves to read through the standard"}, {"timestamp": [523.38, 528.1], "text": " and implement it themselves because that would be like evidence that the standard"}, {"timestamp": [528.1, 529.44], "text": " is easy for people to read"}, {"timestamp": [529.44, 532.08], "text": " yeah"}, {"timestamp": [532.08, 533.96], "text": " I've got to refresh some of"}, {"timestamp": [533.96, 536.04], "text": " my implementations now I think"}, {"timestamp": [536.04, 537.28], "text": " like portal and a few"}, {"timestamp": [537.28, 540.1], "text": " of them are still working but yeah"}, {"timestamp": [540.1, 542.22], "text": " since things have changed I've got a lot to update"}, {"timestamp": [542.22, 545.5], "text": " can I ask a general question? yeah Since things have changed, I've got a lot to update."}, {"timestamp": [546.88, 547.56], "text": " Can I ask a general question?"}, {"timestamp": [547.84, 549.14], "text": " Yeah."}, {"timestamp": [553.2, 553.26], "text": " So kind of what I'm seeing is, you know,"}, {"timestamp": [555.74, 556.44], "text": " there's the development of these GLTF extensions."}, {"timestamp": [560.52, 560.58], "text": " Are we getting to a point where, you know,"}, {"timestamp": [564.12, 564.2], "text": " assets can be streamable, right?"}, {"timestamp": [566.36, 567.28], "text": " If you think about how GLTF is composed,"}, {"timestamp": [568.52, 568.62], "text": " most, I think,"}, {"timestamp": [571.42, 574.18], "text": " Godot wants you to use the GLTF plain JSON and then a binary file connected with it."}, {"timestamp": [574.74, 576.9], "text": " If you think about it from an architecture standpoint,"}, {"timestamp": [577.52, 579.7], "text": " if you can bring in game entity properties,"}, {"timestamp": [580.04, 582.22], "text": " then you're nearly at a point"}, {"timestamp": [582.22, 583.9], "text": " where you could stream resources"}, {"timestamp": [583.9, 585.02], "text": " and obviously hot reload."}, {"timestamp": [585.28, 587.3], "text": " Aaron probably knows a shit ton about that too,"}, {"timestamp": [587.84, 589.18], "text": " but I mean,"}, {"timestamp": [589.26, 592.24], "text": " how is that a goal of the group to have streamable resources?"}, {"timestamp": [592.24, 595.12], "text": " Like do we think that's,"}, {"timestamp": [595.12, 598.48], "text": " that's something that the spec helps with or am I just,"}, {"timestamp": [598.8, 599.26], "text": " am I just,"}, {"timestamp": [599.72, 600.1], "text": " I don't know,"}, {"timestamp": [600.62, 601.42], "text": " way off base here."}, {"timestamp": [603.24, 603.98], "text": " I think,"}, {"timestamp": [604.16, 606.14], "text": " I think it's interesting to think about"}, {"timestamp": [606.14, 608.2], "text": " some of these"}, {"timestamp": [608.2, 610.54], "text": " data structures with"}, {"timestamp": [610.54, 612.44], "text": " that in mind, but I don't think it's something that"}, {"timestamp": [612.44, 613.6], "text": " we would design around."}, {"timestamp": [615.18, 616.6], "text": " But it is interesting"}, {"timestamp": [616.6, 617.22], "text": " to think about"}, {"timestamp": [617.22, 619.98], "text": " runtime changing things."}, {"timestamp": [621.72, 622.6], "text": " But I don't think"}, {"timestamp": [622.6, 623.96], "text": " that really changes much about"}, {"timestamp": [623.96, 625.38], "text": " these data structures. I guess And but I don't think that really changes much about these these."}, {"timestamp": [626.88, 629.24], "text": " The data structures, right, like I mean, I guess."}, {"timestamp": [630.8, 638.84], "text": " Because, like in the case of audio, like you can have a source that's like streaming data coming in, so there is a slight concept of it in that."}, {"timestamp": [640.86, 650.48], "text": " Yeah, I think where I was kind of going with it in my head, it's like we're going ever going to be... I think about Google Docs, you know, what they were saying during the, oh my, the call that was just on Twitter or whatever."}, {"timestamp": [652.06, 655.2], "text": " It's like, yeah, you can have a bunch of people in the same space collaborating."}, {"timestamp": [655.7, 663.86], "text": " I don't think Blender software is going to get to a point where it's going to allow multiple remote users to be manipulating the same space inside Blender."}, {"timestamp": [664.54, 664.78], "text": " Yeah."}, {"timestamp": [665.28, 667.82], "text": " What may happen... That goes for runtime, though, right?"}, {"timestamp": [667.96, 671.58], "text": " Because, like, GLTF in itself is kind of like the exchange,"}, {"timestamp": [671.78, 674.2], "text": " like the static file that you're sharing, right?"}, {"timestamp": [674.82, 675.76], "text": " It's a transfer format."}, {"timestamp": [676.42, 676.68], "text": " Yeah."}, {"timestamp": [676.68, 682.8], "text": " But if several developers were working on Blender on their own machines,"}, {"timestamp": [682.94, 686.92], "text": " let's say, but having a quick export or a hot reload"}, {"timestamp": [686.92, 689.24], "text": " to a game engine like Godot,"}, {"timestamp": [689.54, 693.02], "text": " then those resources would effectively be"}, {"timestamp": [693.02, 697.96], "text": " more or less instantaneously reflected in a scene, right?"}, {"timestamp": [698.02, 698.52], "text": " In a scene tree."}, {"timestamp": [698.64, 698.96], "text": " Yeah."}, {"timestamp": [699.32, 702.08], "text": " So that's not just a tangential thought, that's all."}, {"timestamp": [702.66, 705.32], "text": " Well, so it's actually, it's a good one. It's something that I'mential thought, that's all. Well, it's actually a good one."}, {"timestamp": [705.86, 707.68], "text": " It's something that I'm working on right now."}, {"timestamp": [709.2, 713.44], "text": " So I make a plugin for WordPress where people can build 3D worlds,"}, {"timestamp": [713.44, 719.02], "text": " and it uses the structure of data that WordPress uses for posts,"}, {"timestamp": [719.22, 720.58], "text": " which is called blocks."}, {"timestamp": [721.0, 722.36], "text": " Blocks make up the world."}, {"timestamp": [723.96, 728.04], "text": " And at the end of the day, you're building something very similar"}, {"timestamp": [728.04, 730.08], "text": " to the node structure of a GLTF file."}, {"timestamp": [731.1, 735.52], "text": " So there's a new feature coming for collaborative editing"}, {"timestamp": [735.52, 739.32], "text": " where they want multiple people to be in the same post editor"}, {"timestamp": [739.32, 740.6], "text": " editing the same post."}, {"timestamp": [741.7, 743.92], "text": " And that's pretty much the problem that I have to solve,"}, {"timestamp": [744.02, 748.6], "text": " but at the end of the day, I'm just syncing up JSON and then making the world at runtime"}, {"timestamp": [748.6, 752.24], "text": " true up whatever the changes are."}, {"timestamp": [753.36, 760.72], "text": " And I'm using just like, you know, peer-to-peer messaging between people to keep the changes"}, {"timestamp": [760.72, 761.28], "text": " in sync."}, {"timestamp": [762.36, 765.68], "text": " And yeah, that's the way I see that kind of problem going."}, {"timestamp": [768.28, 769.28], "text": " That's very cool."}, {"timestamp": [769.28, 769.78], "text": " Yeah."}, {"timestamp": [781.38, 788.24], "text": " A lot of side DOMs and just JSON blobs that we're going to be managing on the side"}, {"timestamp": [788.24, 794.8], "text": " this kind of i think how that works and and it doesn't really even change too much about these"}, {"timestamp": [794.8, 807.8], "text": " these standards too because it's like okay you're just keeping in sync that data and the values or whatever yeah I think that would be"}, {"timestamp": [807.8, 810.3], "text": " that's definitely a similar"}, {"timestamp": [810.3, 812.24], "text": " situation to what I'm kind of"}, {"timestamp": [812.24, 813.94], "text": " thinking of"}, {"timestamp": [813.94, 816.18], "text": " of course I'm having"}, {"timestamp": [816.18, 817.76], "text": " tangential thoughts about"}, {"timestamp": [817.76, 819.72], "text": " virtual reality"}, {"timestamp": [819.72, 820.14], "text": " and"}, {"timestamp": [820.14, 824.0], "text": " one weird thing I've always thought about"}, {"timestamp": [824.0, 825.32], "text": " it's like we design,"}, {"timestamp": [826.48, 828.7], "text": " I don't know if we're all game developers in here,"}, {"timestamp": [828.78, 829.18], "text": " probably not."}, {"timestamp": [829.8, 832.96], "text": " But people design game developers,"}, {"timestamp": [833.08, 834.96], "text": " especially indies kind of in isolation,"}, {"timestamp": [835.58, 836.5], "text": " mostly,"}, {"timestamp": [836.66, 839.0], "text": " unless you're actually collaborating on a discord call or something."}, {"timestamp": [839.2, 839.62], "text": " It's like,"}, {"timestamp": [840.26, 843.28], "text": " we ever going to get design time tools where you can be in a 3d space,"}, {"timestamp": [843.4, 844.64], "text": " making the 3d space."}, {"timestamp": [844.92, 846.28], "text": " It's a very pie in the sky."}, {"timestamp": [847.22, 849.1], "text": " Is it the thing?"}, {"timestamp": [850.32, 851.02], "text": " What's that?"}, {"timestamp": [851.26, 851.48], "text": " It's,"}, {"timestamp": [851.52, 852.62], "text": " it's already a thing in,"}, {"timestamp": [852.66, 854.66], "text": " in several apps,"}, {"timestamp": [854.74, 855.12], "text": " actually."}, {"timestamp": [856.06, 857.38], "text": " It's an underrated thing."}, {"timestamp": [857.44, 861.56], "text": " I'll just say that not a super mainstream thing,"}, {"timestamp": [861.56, 862.96], "text": " but as Aaron said,"}, {"timestamp": [863.32, 863.54], "text": " yeah,"}, {"timestamp": [863.54, 863.98], "text": " there's,"}, {"timestamp": [863.98, 870.7], "text": " I just think real time collaboration is such a cool, powerful, and underrated future."}, {"timestamp": [870.7, 876.76], "text": " But yeah, PlayCanvas, TheMirrorhead, real-time collab."}, {"timestamp": [877.4, 881.8], "text": " There's Resonite, Janus, a bunch of web platforms."}, {"timestamp": [884.56, 886.36], "text": " And what level would be..."}, {"timestamp": [886.36, 889.1], "text": " You could author assets in real time?"}, {"timestamp": [889.74, 893.56], "text": " I worked at the Mirror for two years."}, {"timestamp": [893.78, 895.52], "text": " I only recently got laid off"}, {"timestamp": [895.52, 896.78], "text": " because the company ran out of money."}, {"timestamp": [898.16, 899.98], "text": " But the platform still exists."}, {"timestamp": [900.12, 902.18], "text": " It's just low staff right now."}, {"timestamp": [902.84, 905.86], "text": " But the Mirror is really cool because"}, {"timestamp": [905.86, 907.82], "text": " you can just make any"}, {"timestamp": [907.82, 909.14], "text": " gltf assets you want"}, {"timestamp": [909.14, 912.0], "text": " in your editor of choice whether that be blender"}, {"timestamp": [912.0, 913.2], "text": " or gido or whatever"}, {"timestamp": [913.2, 915.98], "text": " you can export it to"}, {"timestamp": [915.98, 917.88], "text": " gltf and then that content"}, {"timestamp": [917.88, 919.68], "text": " will export with the omist standards"}, {"timestamp": [919.68, 922.0], "text": " if you're exporting from gido and you can import"}, {"timestamp": [922.0, 923.54], "text": " that into the mirror and it will load"}, {"timestamp": [923.54, 926.48], "text": " with all the information ready to go out of the box."}, {"timestamp": [927.68, 928.14], "text": " So you just"}, {"timestamp": [928.14, 930.2], "text": " in the game"}, {"timestamp": [930.2, 931.9], "text": " you upload. You have it"}, {"timestamp": [931.9, 934.16], "text": " in your inventory or whatever. You can just"}, {"timestamp": [934.16, 935.44], "text": " pop it down in the world."}, {"timestamp": [935.92, 938.34], "text": " And you can be on a multiplayer instance with other people too."}, {"timestamp": [939.02, 940.42], "text": " And everybody else"}, {"timestamp": [940.42, 941.42], "text": " will see that asset"}, {"timestamp": [941.42, 944.48], "text": " very quickly after you place it down. Like less than a second."}, {"timestamp": [944.48, 945.32], "text": " It's like real-time."}, {"timestamp": [946.22, 947.92], "text": " So you can real-time build"}, {"timestamp": [947.92, 949.54], "text": " a space together with your friends."}, {"timestamp": [951.0, 951.96], "text": " And there's no"}, {"timestamp": [951.96, 954.08], "text": " complex configuring"}, {"timestamp": [954.08, 955.3], "text": " necessary to do"}, {"timestamp": [955.3, 957.9], "text": " in the app. It's all done ahead of time."}, {"timestamp": [958.42, 960.08], "text": " You can configure it further in the app"}, {"timestamp": [960.08, 961.3], "text": " though, like if you want to."}, {"timestamp": [963.26, 964.12], "text": " And there's also"}, {"timestamp": [964.12, 967.62], "text": " like HyperFi has a concept of like multiplayer"}, {"timestamp": [967.62, 973.78], "text": " changing the world and saving it and all that and they've got the user system where certain users"}, {"timestamp": [973.78, 980.22], "text": " can have permissions to edit a world um that's another thing i think needs to be solved with"}, {"timestamp": [980.22, 985.18], "text": " this whole like multiplayer idea is permissions and kind of building..."}, {"timestamp": [986.22, 987.64], "text": " I mean, it's not... I don't know if it's standards around"}, {"timestamp": [987.64, 990.0], "text": " this sort of thing, because it's like, well, what is your..."}, {"timestamp": [990.54, 992.9], "text": " What is your, like,"}, {"timestamp": [993.86, 994.62], "text": " user system"}, {"timestamp": [994.62, 996.12], "text": " using currently?"}, {"timestamp": [996.52, 998.0], "text": " So you've got to kind of..."}, {"timestamp": [999.18, 1000.02], "text": " I don't know."}, {"timestamp": [1001.88, 1004.08], "text": " Yeah, some things are going to be just implementation."}, {"timestamp": [1004.64, 1008.0], "text": " Yeah, it's like that gets too deep to where we're too opinionated on it."}, {"timestamp": [1008.1, 1012.12], "text": " It's like, I don't think there needs to be a standard on this. Everyone's going to have to do it their own way."}, {"timestamp": [1015.66, 1018.46], "text": " Well, that's fascinating. I did not know that was a thing."}, {"timestamp": [1021.74, 1036.22], "text": " Yeah, I have a lot of thoughts on that but yeah that's that's pretty cool well Aaron what what uh things do you have what goodies do you have for us today"}, {"timestamp": [1036.22, 1074.34], "text": " yeah uh give me give me a sec actually I'm trying to uh pull up the mirror right now to show Michael Jared. And of course, I'm having trouble because the code base and the Godot engine underlying it are pretty crashy when you try to run a AAA sized game on top of it. you gotta go talk to the road to vo stock people and see how they're doing"}, {"timestamp": [1074.34, 1080.64], "text": " see how they manage the triple a size world in godot have you seen this has anybody seen their"}, {"timestamp": [1080.64, 1085.46], "text": " stuff we have a lot more challenges, though,"}, {"timestamp": [1085.52, 1089.12], "text": " because a lot of it is issues with importing stuff at runtime"}, {"timestamp": [1089.12, 1091.02], "text": " or issues in the rendering server."}, {"timestamp": [1091.76, 1094.24], "text": " And it's hard to predict what kind of assets"}, {"timestamp": [1094.24, 1095.76], "text": " are coming into the game from users."}, {"timestamp": [1096.46, 1098.8], "text": " So yeah, it's really tricky."}, {"timestamp": [1101.54, 1105.08], "text": " So you're getting crashes just on asset import"}, {"timestamp": [1105.08, 1109.52], "text": " there usually crashes in the rendering"}, {"timestamp": [1109.52, 1111.32], "text": " server like after the asset's loaded"}, {"timestamp": [1111.32, 1113.48], "text": " so like it's not in the asset"}, {"timestamp": [1113.48, 1114.56], "text": " import code it's like"}, {"timestamp": [1114.56, 1116.86], "text": " anyway"}, {"timestamp": [1116.86, 1118.9], "text": " let me screen share"}, {"timestamp": [1118.9, 1136.02], "text": " just got this pulled up. Hopefully it doesn't crash."}, {"timestamp": [1138.28, 1151.12], "text": " And it can take a bit to load up. I'm going to, while that's loading,"}, {"timestamp": [1151.26, 1154.2], "text": " I'll pull up this other project that I was going to show."}, {"timestamp": [1159.56, 1160.74], "text": " How old are these projects?"}, {"timestamp": [1162.34, 1164.82], "text": " So this project I have on my screen right now,"}, {"timestamp": [1166.0, 1168.24], "text": " this one is, I made it in the past week. I started"}, {"timestamp": [1168.24, 1169.16], "text": " it less than a week ago."}, {"timestamp": [1171.54, 1171.94], "text": " So"}, {"timestamp": [1171.94, 1174.52], "text": " this is GLTFx,"}, {"timestamp": [1174.52, 1176.6], "text": " which is a scene format"}, {"timestamp": [1176.6, 1178.58], "text": " that allows you to reference"}, {"timestamp": [1178.58, 1179.84], "text": " other GLTF files."}, {"timestamp": [1180.58, 1180.78], "text": " So"}, {"timestamp": [1180.78, 1184.34], "text": " let me actually open this up"}, {"timestamp": [1184.34, 1185.0], "text": " in..."}, {"timestamp": [1193.0, 1194.48], "text": "...ABS code as well."}, {"timestamp": [1198.54, 1201.44], "text": " So we have this file, which is a GLTF-X,"}, {"timestamp": [1201.64, 1205.44], "text": " and it's very similar to a normal glTF where you have the nodes."}, {"timestamp": [1205.44, 1209.68], "text": " But what it has is these fields here called asset."}, {"timestamp": [1210.32, 1216.56], "text": " And this allows you to reference a sub-object in that glTFx"}, {"timestamp": [1216.56, 1219.68], "text": " that points to a glb or glTF file."}, {"timestamp": [1219.68, 1221.76], "text": " So here's the list of assets."}, {"timestamp": [1221.76, 1222.64], "text": " It has a name."}, {"timestamp": [1222.64, 1224.24], "text": " It has a URI."}, {"timestamp": [1224.24, 1230.12], "text": " It points to this file here, this GLB."}, {"timestamp": [1230.12, 1235.24], "text": " Then inside of here, I can actually go and click on it."}, {"timestamp": [1235.24, 1238.6], "text": " And I get this here."}, {"timestamp": [1238.6, 1243.26], "text": " And I can import that and click Editable Children."}, {"timestamp": [1243.26, 1246.12], "text": " And I see that it's got another scene inside of it."}, {"timestamp": [1246.12, 1249.5], "text": " So it's actually preserving the scene hierarchy."}, {"timestamp": [1249.5, 1252.78], "text": " And I have it supported for both import and export."}, {"timestamp": [1252.78, 1255.48], "text": " So if you have a Godot scene in a hierarchy like this,"}, {"timestamp": [1255.48, 1257.52], "text": " you can actually export this as a glTFx."}, {"timestamp": [1260.78, 1266.44], "text": " And here's an example of this one is a Godot scene."}, {"timestamp": [1266.44, 1271.88], "text": " And I have inside of it a reference to another Godot scene."}, {"timestamp": [1272.02, 1274.34], "text": " And inside of that, a reference to a Godot scene with a mesh."}, {"timestamp": [1274.4, 1276.28], "text": " So it's like a bunch of nesting going on."}, {"timestamp": [1276.86, 1278.44], "text": " And I can actually close that."}, {"timestamp": [1278.62, 1282.28], "text": " And I have it right here exported as a GLTF-X."}, {"timestamp": [1282.98, 1287.72], "text": " So this one is like this GLTFX references"}, {"timestamp": [1287.72, 1289.94], "text": " another GLTFX, which"}, {"timestamp": [1289.94, 1291.26], "text": " then references a GLTF,"}, {"timestamp": [1292.04, 1294.04], "text": " which then has a mesh inside"}, {"timestamp": [1294.04, 1295.78], "text": " of it. So you can do"}, {"timestamp": [1295.78, 1298.02], "text": " arbitrary levels of nesting"}, {"timestamp": [1298.02, 1300.16], "text": " with this system."}, {"timestamp": [1300.84, 1301.42], "text": " And this is"}, {"timestamp": [1301.42, 1302.5], "text": " I just"}, {"timestamp": [1302.5, 1309.84], "text": " just in the past few days uh released this"}, {"timestamp": [1309.84, 1323.82], "text": " okay so this is on your fork this is on not on my fork we could do actually this is a an add-on"}, {"timestamp": [1323.82, 1325.14], "text": " you can just drop it into Godot."}, {"timestamp": [1325.9, 1326.1], "text": " Oh."}, {"timestamp": [1326.38, 1326.82], "text": " Yeah."}, {"timestamp": [1327.14, 1329.88], "text": " Oh, because you're using the glTF document stuff, eh?"}, {"timestamp": [1330.78, 1332.3], "text": " Actually, it's not even using that."}, {"timestamp": [1332.86, 1338.22], "text": " It's using a different system that allows you to provide a brand new format to Godot."}, {"timestamp": [1338.82, 1348.62], "text": " So if I go to Scene, Export As, there's a new option added here by the plugin and there's also i specify in"}, {"timestamp": [1348.62, 1357.86], "text": " in this class that i have i want this class to handle a dot gltfx file and then it gives"}, {"timestamp": [1357.86, 1366.8], "text": " instructions on how to import it and it just says to call into this gltX reference class. And then this class here has actually all the code"}, {"timestamp": [1366.8, 1369.16], "text": " to do the importing and exporting."}, {"timestamp": [1369.42, 1371.48], "text": " And this class could be called at runtime as well."}, {"timestamp": [1371.56, 1376.18], "text": " So if you wanted to implement GLTFX in something like the mirror"}, {"timestamp": [1376.18, 1378.44], "text": " where you're importing an entire scene at runtime,"}, {"timestamp": [1378.58, 1379.42], "text": " you could do that from here."}, {"timestamp": [1382.06, 1390.26], "text": " So just for argument's sake, prior to this asset branch of the GLTF file,"}, {"timestamp": [1390.34, 1396.18], "text": " there's no way to composite a GLTF file from another GLTF."}, {"timestamp": [1396.36, 1398.04], "text": " There's no pre-existing function for that?"}, {"timestamp": [1398.46, 1399.86], "text": " There's no existing system."}, {"timestamp": [1399.86, 1402.16], "text": " You just had to do that within the app,"}, {"timestamp": [1402.34, 1404.02], "text": " and you couldn't do that ahead of time."}, {"timestamp": [1404.42, 1407.54], "text": " So if you wanted a single GLT, a single file,"}, {"timestamp": [1408.02, 1412.64], "text": " save the disk, and you wanted to have several instances"}, {"timestamp": [1412.64, 1415.48], "text": " of the same model or something, you would just"}, {"timestamp": [1415.48, 1416.38], "text": " have to duplicate them."}, {"timestamp": [1417.0, 1418.06], "text": " Just duplicate the node tree."}, {"timestamp": [1418.18, 1419.22], "text": " I mean, you could share the mesh data,"}, {"timestamp": [1419.38, 1421.68], "text": " but duplicating the node tree is kind of annoying."}, {"timestamp": [1423.34, 1424.08], "text": " Right, right."}, {"timestamp": [1425.04, 1426.0], "text": " Yeah, I mean..."}, {"timestamp": [1427.04, 1432.62], "text": " And I've also got the mirror pulled up here."}, {"timestamp": [1432.62, 1436.02], "text": " So this is actually a real-time platform"}, {"timestamp": [1436.02, 1439.82], "text": " that I was working at the company building for two years."}, {"timestamp": [1441.52, 1444.96], "text": " And so all of these objects on the left here are GLTF files."}, {"timestamp": [1447.4, 1452.26], "text": " And if you wanted to upload your own you could just browse for a file on your computer and then once you have that you can just"}, {"timestamp": [1452.26, 1459.18], "text": " drag it in and drag it around and whatever you can come compose it inside the app and it will"}, {"timestamp": [1459.18, 1464.32], "text": " import whatever data is there including like omi physics but you can also like specify your own"}, {"timestamp": [1464.32, 1465.52], "text": " physics if you want it to be"}, {"timestamp": [1465.52, 1467.9], "text": " dynamic or something, you can"}, {"timestamp": [1467.9, 1469.88], "text": " just turn on the dynamic physics, and"}, {"timestamp": [1469.88, 1470.8], "text": " it'll start moving around."}, {"timestamp": [1471.9, 1473.88], "text": " Does it have to make assumptions about physics layers?"}, {"timestamp": [1476.26, 1477.86], "text": " There are no physics"}, {"timestamp": [1477.86, 1479.96], "text": " layers, as far as I know. It's just everything's in the"}, {"timestamp": [1479.96, 1480.8], "text": " same layer right now."}, {"timestamp": [1482.94, 1483.88], "text": " But if there were"}, {"timestamp": [1483.88, 1486.24], "text": " physics layers in the file, we could just import those."}, {"timestamp": [1488.92, 1490.5], "text": " And it's actually..."}, {"timestamp": [1490.5, 1491.88], "text": " Physics layers is something"}, {"timestamp": [1491.88, 1493.02], "text": " that I'd like to discuss today."}, {"timestamp": [1493.82, 1495.82], "text": " Right. Yeah, I was just going to say"}, {"timestamp": [1495.82, 1497.26], "text": " on your GLTFx stuff,"}, {"timestamp": [1497.44, 1499.9], "text": " I have half a dozen or more users of my"}, {"timestamp": [1499.9, 1501.56], "text": " add-on that are asking for that exact"}, {"timestamp": [1501.56, 1503.36], "text": " function, so people would use it."}, {"timestamp": [1503.74, 1505.92], "text": " If it exists, people would use it if if it if it exists people"}, {"timestamp": [1505.92, 1511.44], "text": " would use it um and the reason people want to use it is they want to they want to unburden themselves"}, {"timestamp": [1511.44, 1518.16], "text": " right like through a lot of 3d artists like making an asset in a closed like new blender blank blender"}, {"timestamp": [1518.16, 1523.28], "text": " file the origin's at zero i'm going to make this 3d asset right it's going to hard surface model"}, {"timestamp": [1523.28, 1526.74], "text": " or something i would like to be able to open up another scene"}, {"timestamp": [1526.74, 1528.56], "text": " and then reference that and place it."}, {"timestamp": [1529.58, 1532.44], "text": " Yeah, so you could totally do that inside of Github"}, {"timestamp": [1532.44, 1533.54], "text": " with my add-on installed."}, {"timestamp": [1534.8, 1537.64], "text": " And the way that it works is you just compose your scenes"}, {"timestamp": [1537.64, 1538.9], "text": " as you would in Github."}, {"timestamp": [1539.5, 1543.82], "text": " And then you could do scene export as GLTFX reference format."}, {"timestamp": [1544.3, 1546.92], "text": " And then you click on this, you get this menu here."}, {"timestamp": [1547.8, 1550.36], "text": " And this-"}, {"timestamp": [1550.36, 1552.68], "text": " So your Godot add-on is adding all of this functionality,"}, {"timestamp": [1552.82, 1555.7], "text": " the new context menu item, the new panel on the export."}, {"timestamp": [1556.5, 1560.28], "text": " Yeah, it's very, very, very easy to plug stuff into Godot."}, {"timestamp": [1560.4, 1561.42], "text": " It's extremely flexible."}, {"timestamp": [1561.94, 1564.08], "text": " It's like, it's also very well documented."}, {"timestamp": [1564.08, 1565.0], "text": " So it's much easier to make this to get out. It's extremely flexible. It's also very well documented."}, {"timestamp": [1565.94, 1567.38], "text": " It's much easier to make this than"}, {"timestamp": [1567.38, 1570.0], "text": " anything else that I"}, {"timestamp": [1570.0, 1571.84], "text": " would make in Blender. I would have to spend"}, {"timestamp": [1571.84, 1573.9], "text": " a month trying to do this in Blender to figure out"}, {"timestamp": [1573.9, 1575.8], "text": " its API. Also,"}, {"timestamp": [1576.38, 1577.34], "text": " part of this is I"}, {"timestamp": [1577.34, 1579.88], "text": " helped make this API, so I already know it"}, {"timestamp": [1579.88, 1581.9], "text": " a bit. Even if I"}, {"timestamp": [1581.9, 1583.36], "text": " didn't know it, it would still be really easy."}, {"timestamp": [1587.94, 1596.16], "text": " In this dialogue here um this this panel on the right is actually not possible in githo 4.3 um because like there's"}, {"timestamp": [1596.16, 1609.82], "text": " an api that is not uh exposed so like as i was making this i made a PR to expose the API. So if you download this today without that PR installed,"}, {"timestamp": [1609.96, 1613.8], "text": " it will not show this panel on the right for the settings."}, {"timestamp": [1613.8, 1616.7], "text": " If you want to specify if it's a GLB or GLTF."}, {"timestamp": [1616.72, 1618.68], "text": " This is running in your fork then."}, {"timestamp": [1619.08, 1619.42], "text": " Yes."}, {"timestamp": [1619.72, 1621.8], "text": " But the only thing the fork does is..."}, {"timestamp": [1622.72, 1622.92], "text": " Yeah."}, {"timestamp": [1623.16, 1623.5], "text": " Yeah."}, {"timestamp": [1625.26, 1626.06], "text": " Makes sense. Class DB, yeah. Yeah. Makes sense."}, {"timestamp": [1626.54, 1627.1], "text": " Class DB."}, {"timestamp": [1627.58, 1627.78], "text": " Yep."}, {"timestamp": [1628.1, 1628.34], "text": " Yep."}, {"timestamp": [1629.8, 1633.48], "text": " And then even without this panel, you can still use it."}, {"timestamp": [1633.62, 1635.54], "text": " You'll only export with the default settings."}, {"timestamp": [1635.68, 1638.66], "text": " And you can save this wherever you want."}, {"timestamp": [1642.56, 1645.56], "text": " Just make a folder there and save that in there."}, {"timestamp": [1646.42, 1650.44], "text": " And then, oh, I just remembered a small bug I need to fix."}, {"timestamp": [1651.18, 1653.08], "text": " It doesn't actually refresh the file system."}, {"timestamp": [1653.14, 1655.08], "text": " I need to click out and then click back into Github"}, {"timestamp": [1655.08, 1656.84], "text": " and then it recognizes it."}, {"timestamp": [1659.0, 1664.86], "text": " Then I have here, here's the GLTF-X node 3D."}, {"timestamp": [1666.34, 1667.46], "text": " I can click on it and we have everything from there."}, {"timestamp": [1668.12, 1668.52], "text": " I can"}, {"timestamp": [1668.52, 1672.28], "text": " drag this in and we have"}, {"timestamp": [1672.28, 1674.64], "text": " that Node 3D with everything"}, {"timestamp": [1674.64, 1675.94], "text": " underneath it."}, {"timestamp": [1676.42, 1678.16], "text": " I can drill down"}, {"timestamp": [1678.16, 1679.7], "text": " into these folders. I can see that"}, {"timestamp": [1679.7, 1682.14], "text": " everything goes down to the"}, {"timestamp": [1682.14, 1683.14], "text": " GLB eventually."}, {"timestamp": [1687.24, 1688.3], "text": " That's a good"}, {"timestamp": [1688.3, 1690.26], "text": " feature. I think I've been in so"}, {"timestamp": [1690.26, 1691.76], "text": " many of these conversations where"}, {"timestamp": [1691.76, 1693.66], "text": " people get hung up on the"}, {"timestamp": [1693.66, 1696.28], "text": " philosophy of, oh, should I"}, {"timestamp": [1696.28, 1698.06], "text": " be compositing in Godot or should I be"}, {"timestamp": [1698.06, 1699.18], "text": " compositing in Blender?"}, {"timestamp": [1699.72, 1701.74], "text": " I like the work"}, {"timestamp": [1701.74, 1704.36], "text": " that this group is doing"}, {"timestamp": [1704.36, 1704.88], "text": " because"}, {"timestamp": [1704.88, 1708.18], "text": " it's like you're giving the options."}, {"timestamp": [1708.48, 1709.34], "text": " You're providing options."}, {"timestamp": [1710.18, 1711.34], "text": " And for an open standard,"}, {"timestamp": [1711.64, 1713.2], "text": " that totally makes sense."}, {"timestamp": [1713.4, 1716.06], "text": " You're not going to wrangle people to do the same thing."}, {"timestamp": [1716.92, 1718.26], "text": " The ideal case here as well"}, {"timestamp": [1718.26, 1720.3], "text": " is that you shouldn't have to worry about"}, {"timestamp": [1720.3, 1722.1], "text": " the tool that you're using"}, {"timestamp": [1722.1, 1723.82], "text": " to do it with."}, {"timestamp": [1723.88, 1726.0], "text": " You should just do what you're comfortable with."}, {"timestamp": [1726.0, 1728.1], "text": " I'm comfortable with Github, but a lot of people aren't."}, {"timestamp": [1728.1, 1731.88], "text": " But then the end result here, these files"}, {"timestamp": [1731.88, 1738.56], "text": " are very, very simple general engine agnostic files."}, {"timestamp": [1738.56, 1743.0], "text": " So any tool could be built to generate these."}, {"timestamp": [1743.0, 1745.74], "text": " Hey, guys. generate these. Hey guys, just to confirm,"}, {"timestamp": [1746.02, 1747.94], "text": " is GLTFX"}, {"timestamp": [1747.94, 1750.04], "text": " supported by Blender right"}, {"timestamp": [1750.04, 1752.0], "text": " now, or is that something that's..."}, {"timestamp": [1752.52, 1754.1], "text": " Not supported by Blender right now."}, {"timestamp": [1754.18, 1755.84], "text": " In fact, it's not even"}, {"timestamp": [1755.84, 1757.78], "text": " ratified by the Kronos group yet."}, {"timestamp": [1758.82, 1759.92], "text": " Right, right, okay."}, {"timestamp": [1760.36, 1761.98], "text": " So the Kronos group"}, {"timestamp": [1761.98, 1764.02], "text": " is working on it. Here's the repo for it."}, {"timestamp": [1765.5, 1768.84], "text": " And it's just a format for composing the GLTF assets."}, {"timestamp": [1769.0, 1769.88], "text": " It's not final yet."}, {"timestamp": [1770.3, 1772.94], "text": " So I included the note here."}, {"timestamp": [1773.04, 1775.92], "text": " It says that the format is a work in progress."}, {"timestamp": [1775.92, 1778.3], "text": " It's not yet ratified until it's finalized."}, {"timestamp": [1778.3, 1781.94], "text": " This add-on can be considered experimental and subject to change at any time"}, {"timestamp": [1781.94, 1784.98], "text": " to comply with the latest iteration of the draft spec."}, {"timestamp": [1786.96, 1787.52], "text": " So forgive me. mental and subject to change at any time to comply with the latest iteration of the draft spec. So,"}, {"timestamp": [1787.68, 1789.86], "text": " forgive me, in simple terms,"}, {"timestamp": [1790.02, 1792.02], "text": " this is like Godot scenes, but in"}, {"timestamp": [1792.02, 1794.1], "text": " a potentially very"}, {"timestamp": [1794.1, 1796.1], "text": " migratable open format"}, {"timestamp": [1796.1, 1796.92], "text": " standard."}, {"timestamp": [1798.04, 1799.56], "text": " Yes, but there is"}, {"timestamp": [1799.56, 1801.56], "text": " a"}, {"timestamp": [1801.56, 1803.66], "text": " key difference here."}, {"timestamp": [1803.66, 1810.78], "text": " So we have like It's like a linked"}, {"timestamp": [1810.78, 1811.56], "text": " collection, no?"}, {"timestamp": [1811.98, 1813.38], "text": " For Glendor."}, {"timestamp": [1814.2, 1816.54], "text": " I would imagine a Blender explorer"}, {"timestamp": [1816.54, 1817.96], "text": " could use collections for this."}, {"timestamp": [1819.2, 1820.66], "text": " But anyway, it's a"}, {"timestamp": [1820.66, 1822.02], "text": " we have"}, {"timestamp": [1822.02, 1824.76], "text": " in Godot, you just have scenes all the way"}, {"timestamp": [1824.76, 1825.96], "text": " down. So everything's a scene"}, {"timestamp": [1825.96, 1826.32], "text": " right"}, {"timestamp": [1826.32, 1829.2], "text": " yeah"}, {"timestamp": [1829.2, 1833.94], "text": " in Unity"}, {"timestamp": [1833.94, 1836.34], "text": " you have mostly prefabs"}, {"timestamp": [1836.34, 1838.16], "text": " but then you have to have a scene as the top"}, {"timestamp": [1838.16, 1860.14], "text": " level So glTFx are the branches and glTF are the leaves."}, {"timestamp": [1860.98, 1861.5], "text": " Exactly."}, {"timestamp": [1861.5, 1866.82], "text": " So instead of having in Unity where the root is a special thing in GLTF"}, {"timestamp": [1866.82, 1868.34], "text": " the leaves are a special thing"}, {"timestamp": [1868.34, 1870.88], "text": " you know that's a very beautiful"}, {"timestamp": [1870.88, 1872.22], "text": " way to put it thank you"}, {"timestamp": [1872.22, 1875.44], "text": " yeah"}, {"timestamp": [1875.44, 1879.1], "text": " so this way"}, {"timestamp": [1879.1, 1881.0], "text": " the reason the Chronos group chose"}, {"timestamp": [1881.0, 1882.4], "text": " to do it this way is because"}, {"timestamp": [1882.4, 1885.8], "text": " as long as you see a GLTF, you know that's"}, {"timestamp": [1885.8, 1888.12], "text": " referencing, that's just a single"}, {"timestamp": [1888.12, 1889.7], "text": " model, a single scene."}, {"timestamp": [1889.86, 1891.84], "text": " And it maybe had some external resources,"}, {"timestamp": [1891.84, 1893.84], "text": " but it's just one thing. It's not going"}, {"timestamp": [1893.84, 1895.86], "text": " to branch off to infinity to"}, {"timestamp": [1895.86, 1896.96], "text": " grab more things."}, {"timestamp": [1898.38, 1899.92], "text": " But then a GLTF-X,"}, {"timestamp": [1900.22, 1901.2], "text": " you know that that's"}, {"timestamp": [1901.2, 1903.84], "text": " going to contain other things for sure."}, {"timestamp": [1904.54, 1908.4], "text": " And so if you load that, you know that you're going to need other files along with it."}, {"timestamp": [1910.14, 1910.58], "text": " Yeah."}, {"timestamp": [1912.66, 1919.38], "text": " So the GLTF file is going to basically say, hey, I don't need to recurse any deeper."}, {"timestamp": [1920.98, 1924.7], "text": " This is going to be either GLD with everything or GLTF plus bin file."}, {"timestamp": [1926.32, 1927.32], "text": " Yep, exactly."}, {"timestamp": [1927.32, 1927.7], "text": " Is that right?"}, {"timestamp": [1928.04, 1928.18], "text": " Yeah."}, {"timestamp": [1928.28, 1928.46], "text": " Yeah."}, {"timestamp": [1929.94, 1932.94], "text": " And also worth mentioning,"}, {"timestamp": [1933.06, 1938.28], "text": " GLTF explicitly forbids things like meshes, materials,"}, {"timestamp": [1939.08, 1940.76], "text": " images, buffers, accessors."}, {"timestamp": [1941.88, 1944.48], "text": " Any kind of the meaty data is left delegated"}, {"timestamp": [1944.48, 1946.5], "text": " to the leaf glTF files."}, {"timestamp": [1947.4, 1948.44], "text": " So it can just have nodes"}, {"timestamp": [1948.44, 1950.64], "text": " basically. Yeah, glTFx"}, {"timestamp": [1950.64, 1952.38], "text": " can only have nodes and references to"}, {"timestamp": [1952.38, 1954.5], "text": " other assets. And those nodes"}, {"timestamp": [1954.5, 1956.46], "text": " can have position, rotation"}, {"timestamp": [1956.46, 1958.56], "text": " and scale or a transformation"}, {"timestamp": [1958.56, 1959.7], "text": " matrix, but that's it."}, {"timestamp": [1960.78, 1960.9], "text": " Yeah."}, {"timestamp": [1963.16, 1964.72], "text": " There's great applications"}, {"timestamp": [1964.72, 1966.84], "text": " with that that I can think of right off the top of my head."}, {"timestamp": [1966.84, 1972.54], "text": " One thing that Blender users are finally coming around to is using the asset drawer in Blender."}, {"timestamp": [1974.3, 1975.92], "text": " People are seeing ways to do that."}, {"timestamp": [1976.12, 1981.44], "text": " So I think you could build an add-on pretty easily to convert a linked collection to a GLTF."}, {"timestamp": [1981.86, 1986.0], "text": " And then, of course, your main thing is going to export a glTFx that's going to reference that one"}, {"timestamp": [1986.0, 1988.72], "text": " I think a lot of"}, {"timestamp": [1988.72, 1989.74], "text": " applications of this"}, {"timestamp": [1989.74, 1992.1], "text": " yeah"}, {"timestamp": [1992.1, 1999.54], "text": " so"}, {"timestamp": [1999.54, 2004.58], "text": " anyway that's"}, {"timestamp": [2004.58, 2007.26], "text": " the glTFx stuff, and I'm"}, {"timestamp": [2007.26, 2008.98], "text": " glad that I got to show that off, but"}, {"timestamp": [2008.98, 2010.9], "text": " we also have other things to discuss"}, {"timestamp": [2010.9, 2012.88], "text": " today in the"}, {"timestamp": [2012.88, 2014.88], "text": " OMI meeting. There's also"}, {"timestamp": [2014.88, 2015.5], "text": " the"}, {"timestamp": [2015.5, 2018.94], "text": " GLTF extensions"}, {"timestamp": [2018.94, 2020.92], "text": " repo pull request that I made that we"}, {"timestamp": [2020.92, 2021.78], "text": " need to discuss."}, {"timestamp": [2024.34, 2024.94], "text": " There's"}, {"timestamp": [2024.94, 2026.1], "text": " three PRs here"}, {"timestamp": [2026.1, 2027.94], "text": " and we actually already"}, {"timestamp": [2027.94, 2029.38], "text": " took a look at these last week"}, {"timestamp": [2029.38, 2031.16], "text": " but then"}, {"timestamp": [2031.16, 2033.0], "text": " we said that"}, {"timestamp": [2033.0, 2035.98], "text": " Lyuma wasn't there last week and we didn't"}, {"timestamp": [2035.98, 2038.12], "text": " have a lot of people so we would discuss"}, {"timestamp": [2038.12, 2040.04], "text": " it again this week or bring"}, {"timestamp": [2040.04, 2041.32], "text": " it up again or something and"}, {"timestamp": [2041.32, 2044.1], "text": " since Michael Jarrett hasn't seen these before I'll just"}, {"timestamp": [2044.1, 2055.08], "text": " go over them really quickly so with this pr uh basically there's a competing uh a spec from owen from"}, {"timestamp": [2055.08, 2067.26], "text": " microsoft and he's calling it uh khr uh preemptively presum presumptively, something like that. And it has more features than this repo,"}, {"timestamp": [2067.7, 2071.44], "text": " but I'm very critical of some of the things in it"}, {"timestamp": [2071.44, 2074.16], "text": " that I don't think they're doing properly or ideally."}, {"timestamp": [2075.04, 2076.7], "text": " So what I'm trying to do here"}, {"timestamp": [2076.7, 2079.16], "text": " is I'm trying to converge the specs together"}, {"timestamp": [2079.16, 2083.34], "text": " to make the OMI physics spec have all those missing features"}, {"timestamp": [2083.34, 2086.62], "text": " and bring it closer to the Microsoft one."}, {"timestamp": [2087.64, 2091.2], "text": " And then we can compare these and converge them"}, {"timestamp": [2091.2, 2093.18], "text": " into some final spec one day."}, {"timestamp": [2095.04, 2099.62], "text": " So the OMI one currently has motion and colliders"}, {"timestamp": [2099.62, 2100.26], "text": " and triggers."}, {"timestamp": [2101.4, 2105.76], "text": " And this PR adds physics materials and filtering."}, {"timestamp": [2105.76, 2108.14], "text": " Filtering was like layers and stuff."}, {"timestamp": [2108.14, 2110.88], "text": " And physics materials is like the friction"}, {"timestamp": [2110.88, 2112.68], "text": " and the bounciness of a surface."}, {"timestamp": [2116.98, 2121.3], "text": " So I can click on here and then look at some of the details"}, {"timestamp": [2121.3, 2121.8], "text": " here."}, {"timestamp": [2121.56, 2125.36], "text": " at some of the details here."}, {"timestamp": [2130.48, 2133.56], "text": " So it adds this entire section for physics materials and filtering and all these things."}, {"timestamp": [2133.56, 2138.56], "text": " And this wording is very similar to the physics materials"}, {"timestamp": [2138.56, 2140.88], "text": " and filtering."}, {"timestamp": [2140.88, 2142.8], "text": " The physics materials are very similar to what's"}, {"timestamp": [2142.8, 2147.84], "text": " found in Unity or Unreal, where there's the types of friction and the restitution and how they combine."}, {"timestamp": [2149.82, 2155.08], "text": " And a lot of this is just directly copied from the Microsoft spec,"}, {"timestamp": [2155.16, 2156.46], "text": " because again, we're trying to converge them."}, {"timestamp": [2157.08, 2162.04], "text": " So I looked over every word, but the starting point is just copying from them."}, {"timestamp": [2162.94, 2167.94], "text": " And then we can compare any differences later."}, {"timestamp": [2167.94, 2169.6], "text": " And this is actually, by the way,"}, {"timestamp": [2169.6, 2173.28], "text": " different from the physics materials in Godot Engine."}, {"timestamp": [2173.28, 2175.7], "text": " But that's just a problem of Godot Engine"}, {"timestamp": [2175.7, 2179.42], "text": " because it's not doing things ideally."}, {"timestamp": [2182.18, 2184.5], "text": " Then there's also the filtering."}, {"timestamp": [2184.5, 2192.18], "text": " And the filtering is, first of all, it's done per shape, not per body."}, {"timestamp": [2192.82, 2197.72], "text": " Giddo does it per body, which is arguably worse, because the per shape is a lot more flexible."}, {"timestamp": [2198.4, 2200.52], "text": " And per shape is how a lot of engines do it."}, {"timestamp": [2201.18, 2203.34], "text": " So that's what Microsoft Spec is doing."}, {"timestamp": [2203.46, 2207.64], "text": " And that's what I'm proposing that we do here just to do the same thing."}, {"timestamp": [2208.74, 2215.92], "text": " And the way that the filtering actually works is by using these lists of"}, {"timestamp": [2215.92, 2219.02], "text": " collision systems. And these are like named physics layers."}, {"timestamp": [2220.0, 2226.9], "text": " And these will be expected to be imported into a game engine using a layer system."}, {"timestamp": [2227.54, 2231.64], "text": " So you'd have to figure out what name you want to use for a physics layer."}, {"timestamp": [2234.08, 2240.4], "text": " And then it also provides either a list of things that you want it to collide with or things that you don't want it to collide with."}, {"timestamp": [2240.98, 2250.08], "text": " So these are mutually exclusive, so you either use one or the other. If you just use"}, {"timestamp": [2250.08, 2255.06], "text": " like collide with systems, it will collide with everything listed here and not collide with anything"}, {"timestamp": [2255.06, 2261.78], "text": " not listed. And if you use this one, it will avoid colliding with any of these, but anything not"}, {"timestamp": [2261.78, 2265.04], "text": " listed in that list, it will collide with."}, {"timestamp": [2266.0, 2266.96], "text": " Sorry, can you just go back for a second?"}, {"timestamp": [2268.02, 2269.74], "text": " You said the Godot implementation"}, {"timestamp": [2269.74, 2272.02], "text": " is only"}, {"timestamp": [2272.02, 2273.98], "text": " looking at that collision filter on"}, {"timestamp": [2273.98, 2275.16], "text": " the level of a body?"}, {"timestamp": [2276.04, 2278.16], "text": " Yes, so like a rigid body 3D"}, {"timestamp": [2278.16, 2279.98], "text": " node or a kinematic or character"}, {"timestamp": [2279.98, 2280.94], "text": " body 3D node."}, {"timestamp": [2280.94, 2284.14], "text": " I need to learn more about the physics"}, {"timestamp": [2284.14, 2285.2], "text": " side of the engine, but how is it doing that if learn more about the physics side of the engine but"}, {"timestamp": [2285.2, 2289.12], "text": " how is it doing that if a body has multiple shapes associated with it"}, {"timestamp": [2289.12, 2297.52], "text": " yeah i just just did the same thing on my end um"}, {"timestamp": [2297.52, 2313.92], "text": " so um the the the spec would say that like node here, the shape, would have on the inspector layers, and it would be strings in the glTF."}, {"timestamp": [2314.56, 2321.26], "text": " And then in Godot, you have here on the body, it's doing layers."}, {"timestamp": [2322.06, 2322.56], "text": " layers on the body level."}, {"timestamp": [2323.04, 2326.12], "text": " Yeah, so what we could do here for our"}, {"timestamp": [2326.12, 2327.56], "text": " Godot implementation is"}, {"timestamp": [2327.56, 2329.98], "text": " long-term, we could see if we can add"}, {"timestamp": [2329.98, 2331.54], "text": " the per-shape filtering."}, {"timestamp": [2331.98, 2333.26], "text": " That would be like the ideal case."}, {"timestamp": [2333.78, 2335.98], "text": " Short-term, what we could do"}, {"timestamp": [2335.98, 2338.06], "text": " is take everything"}, {"timestamp": [2338.06, 2340.06], "text": " that exists on the body and apply it"}, {"timestamp": [2340.06, 2341.52], "text": " to every single shape child."}, {"timestamp": [2342.36, 2344.04], "text": " And then when we're importing, we can"}, {"timestamp": [2344.04, 2345.82], "text": " just look at one of the shape childs"}, {"timestamp": [2345.82, 2346.78], "text": " and apply it to the body."}, {"timestamp": [2347.14, 2349.28], "text": " And that's not going to work correctly"}, {"timestamp": [2349.28, 2351.2], "text": " if the shapes have different filtering settings."}, {"timestamp": [2351.74, 2352.58], "text": " But to be honest,"}, {"timestamp": [2353.0, 2355.04], "text": " I expect that most assets"}, {"timestamp": [2355.04, 2359.34], "text": " will have all the shapes on a body"}, {"timestamp": [2359.34, 2360.52], "text": " with the same filtering."}, {"timestamp": [2360.94, 2362.34], "text": " It's just like the edge cases"}, {"timestamp": [2362.34, 2364.56], "text": " where we don't have the freedom"}, {"timestamp": [2364.56, 2366.64], "text": " to make it different"}, {"timestamp": [2366.64, 2372.9], "text": " shapes have different filtering settings what's the i'm trying to imagine a use case where you"}, {"timestamp": [2372.9, 2377.72], "text": " have a single rigid body that would have basically what you're saying is that there could be parts of"}, {"timestamp": [2377.72, 2385.28], "text": " it parts of those collision shapes that are acting on different layers let's say in Unity or Unreal."}, {"timestamp": [2385.28, 2389.06], "text": " What's an actual use case of that?"}, {"timestamp": [2389.06, 2390.76], "text": " Because I can't think of one right now."}, {"timestamp": [2393.56, 2395.22], "text": " Why would a single rigid body need"}, {"timestamp": [2395.22, 2399.44], "text": " to have shapes that are on different layers?"}, {"timestamp": [2399.44, 2404.72], "text": " So for example, imagine a spaceship,"}, {"timestamp": [2404.72, 2406.7], "text": " maybe like a Borg cube or something."}, {"timestamp": [2407.36, 2411.7], "text": " And from the outside, you only care about the cube collisions."}, {"timestamp": [2411.84, 2413.2], "text": " You might have a box collider on it."}, {"timestamp": [2413.76, 2416.58], "text": " And from the outside, that's the only layer"}, {"timestamp": [2416.58, 2418.14], "text": " that you care about colliding with things."}, {"timestamp": [2418.14, 2418.22], "text": " I see."}, {"timestamp": [2418.4, 2419.22], "text": " Yep, I got it."}, {"timestamp": [2419.22, 2420.46], "text": " I got it already."}, {"timestamp": [2420.78, 2423.06], "text": " Yeah, for anything inside, you want it to ignore that."}, {"timestamp": [2423.64, 2430.74], "text": " And you want it to consider instead like the details of the interior so how do we do okay don't want to tangent here but"}, {"timestamp": [2430.74, 2436.9], "text": " um so in godot right now you just want to be able to do that great they would create different"}, {"timestamp": [2436.9, 2441.58], "text": " to get around this limitation in godot today people are probably creating multiple rigid"}, {"timestamp": [2441.58, 2446.1], "text": " bodies that are somehow that's true that's another option you could create multiple rigid bodies that are somehow... That's true. That's another option. You could create multiple"}, {"timestamp": [2446.1, 2447.26], "text": " rigid bodies in Godot."}, {"timestamp": [2447.9, 2449.3], "text": " The challenge, though, is that..."}, {"timestamp": [2449.3, 2451.0], "text": " They're moving separately, right?"}, {"timestamp": [2451.1, 2452.98], "text": " You can joint them together."}, {"timestamp": [2453.98, 2455.94], "text": " You could joint them together, but the"}, {"timestamp": [2455.94, 2458.02], "text": " challenge there is that the joints are going to be"}, {"timestamp": [2458.02, 2459.76], "text": " very janky."}, {"timestamp": [2460.44, 2462.22], "text": " That's a bad solution. Okay, I got you."}, {"timestamp": [2462.34, 2462.84], "text": " I'm on track."}, {"timestamp": [2463.16, 2466.52], "text": " So, yeah. We want to build the standard"}, {"timestamp": [2466.52, 2468.16], "text": " to be flexible, but"}, {"timestamp": [2468.16, 2470.44], "text": " it's okay if it can't be perfectly mapped"}, {"timestamp": [2470.44, 2472.28], "text": " to every game engine, because you're never going to get"}, {"timestamp": [2472.28, 2474.6], "text": " it to agree. If we propose"}, {"timestamp": [2474.6, 2476.36], "text": " that it's per body, then the Unity folks"}, {"timestamp": [2476.36, 2478.1], "text": " would just say, well, why don't you do per shape?"}, {"timestamp": [2478.16, 2480.06], "text": " We can do per shape. That's better for us."}, {"timestamp": [2480.64, 2482.46], "text": " And why do we have to break our assets"}, {"timestamp": [2482.46, 2483.38], "text": " when we're exporting them?"}, {"timestamp": [2484.22, 2486.22], "text": " I think the standard needs to focus on"}, {"timestamp": [2486.22, 2488.08], "text": " what is the"}, {"timestamp": [2488.08, 2490.34], "text": " best and most correct"}, {"timestamp": [2490.34, 2491.6], "text": " way to do any"}, {"timestamp": [2491.6, 2494.54], "text": " game entity function that's going to get"}, {"timestamp": [2494.54, 2496.48], "text": " dragged around"}, {"timestamp": [2496.48, 2497.92], "text": " with this GLTF data."}, {"timestamp": [2498.02, 2500.32], "text": " Isn't the other alternative what is"}, {"timestamp": [2500.32, 2502.08], "text": " most popular, what is already"}, {"timestamp": [2502.08, 2504.0], "text": " the common?"}, {"timestamp": [2504.5, 2507.04], "text": " The per shape is the most popular, most common."}, {"timestamp": [2508.62, 2511.16], "text": " But yeah, Michael, Jared, this is the kind of discussion"}, {"timestamp": [2511.16, 2513.84], "text": " that we've been having for two years or something,"}, {"timestamp": [2513.92, 2516.5], "text": " trying to figure out what is the common ground"}, {"timestamp": [2516.5, 2518.98], "text": " that is common to all these engines that we can all agree on."}, {"timestamp": [2519.98, 2524.02], "text": " And I know that if you're just trying to build a Blender to Godot pipeline,"}, {"timestamp": [2524.02, 2528.96], "text": " every part where that differs from Blender and differs from Godot is annoying."}, {"timestamp": [2529.62, 2534.72], "text": " But this doesn't prevent you from doing..."}, {"timestamp": [2534.72, 2538.46], "text": " If you just make sure that you only export the shapes in a body"}, {"timestamp": [2538.46, 2540.62], "text": " that agree with each other in terms of the filtering,"}, {"timestamp": [2541.18, 2544.2], "text": " then you're not going to have a problem importing that into Godot."}, {"timestamp": [2544.38, 2545.52], "text": " It's only if you make it disagree."}, {"timestamp": [2546.1, 2547.08], "text": " So you're not actually being limited."}, {"timestamp": [2548.04, 2550.12], "text": " I think, yeah, exactly."}, {"timestamp": [2550.6, 2551.82], "text": " I don't care."}, {"timestamp": [2551.96, 2555.82], "text": " If a specific engine has more specific tooling"}, {"timestamp": [2555.82, 2558.16], "text": " that tailors the need, I think that makes sense."}, {"timestamp": [2559.62, 2561.94], "text": " One slight question."}, {"timestamp": [2562.06, 2578.64], "text": " It's a philosophical question, and I apologize in advance. Is there not a bit of a slippery slope phenomenon where we just keep bringing in more and more and more features into the GLTF extensions?"}, {"timestamp": [2580.04, 2580.78], "text": " Isn't it?"}, {"timestamp": [2581.34, 2581.94], "text": " Yeah."}, {"timestamp": [2582.18, 2587.68], "text": " Compared to what? Like, what is the slippery slope compared to what like where does the slippery stuff compare it to because i'll give you"}, {"timestamp": [2587.68, 2595.92], "text": " an example like right now my very proprietary add-on which only works for godot does not rely"}, {"timestamp": [2595.92, 2602.8], "text": " on a standard has many obvious problems let me put it this way it works very well 80 plus percent of"}, {"timestamp": [2602.8, 2605.52], "text": " the time and for users that want to do things"}, {"timestamp": [2605.52, 2612.16], "text": " quickly that's good so one of the features it implements uh is that literally there's a way to"}, {"timestamp": [2612.16, 2618.92], "text": " have a line separated text file that you can associate with the gltf node and on that line"}, {"timestamp": [2618.92, 2625.66], "text": " separated text file you can specify any godot properties, you know, and basically tag it with that note."}, {"timestamp": [2625.86, 2627.96], "text": " For instance, a collision layer, a collision mask."}, {"timestamp": [2628.3, 2631.6], "text": " Those are two properties of physics body."}, {"timestamp": [2632.66, 2645.64], "text": " And so users can specify and attach in Blender to their objects at design time what Godot properties all these things are going to have. And the way that's implemented, it's janky, but it works,"}, {"timestamp": [2645.84, 2648.34], "text": " is the GDScript parsing mechanism"}, {"timestamp": [2648.34, 2650.76], "text": " to set the object's properties."}, {"timestamp": [2653.96, 2655.7], "text": " I'm not saying that's the right thing to do."}, {"timestamp": [2655.96, 2658.0], "text": " I'm not saying that's, you know."}, {"timestamp": [2658.28, 2660.0], "text": " Yeah, and that makes perfect sense"}, {"timestamp": [2660.0, 2661.74], "text": " as like the easiest solution"}, {"timestamp": [2661.74, 2664.06], "text": " when you're trying to implement a Blender to Godot pipeline."}, {"timestamp": [2664.48, 2665.74], "text": " The two problems with that,"}, {"timestamp": [2665.86, 2667.88], "text": " the obvious one is that only it works for Godot,"}, {"timestamp": [2668.02, 2669.58], "text": " but the non-obvious one is that"}, {"timestamp": [2669.58, 2671.86], "text": " it's not cross-project"}, {"timestamp": [2671.86, 2673.68], "text": " compatible. So if you make"}, {"timestamp": [2673.68, 2675.78], "text": " an asset that says,"}, {"timestamp": [2675.94, 2677.7], "text": " I want to be on collision layer 3,"}, {"timestamp": [2678.22, 2680.0], "text": " and then you try to bring that"}, {"timestamp": [2680.0, 2681.96], "text": " into another Godot project, well, maybe that"}, {"timestamp": [2681.96, 2683.78], "text": " other Godot project uses collision layer"}, {"timestamp": [2683.78, 2685.16], "text": " 3 for something else."}, {"timestamp": [2688.9, 2690.06], "text": " You're losing me there a little"}, {"timestamp": [2690.06, 2691.44], "text": " bit, because, I mean,"}, {"timestamp": [2691.58, 2693.9], "text": " a property like Collision Layer, that's existed"}, {"timestamp": [2693.9, 2696.0], "text": " back, you know, as far as I can remember"}, {"timestamp": [2696.0, 2698.08], "text": " with Godot. So it's not a matter"}, {"timestamp": [2698.08, 2699.82], "text": " of engine version. No, it'll still exist,"}, {"timestamp": [2699.92, 2701.32], "text": " it'll be importable, but it just might"}, {"timestamp": [2701.32, 2703.18], "text": " behave differently. Like, maybe"}, {"timestamp": [2703.18, 2706.56], "text": " game A"}, {"timestamp": [2706.56, 2708.18], "text": " puts the player on collision"}, {"timestamp": [2708.18, 2710.2], "text": " layer 2, and game B puts the"}, {"timestamp": [2710.2, 2711.42], "text": " player on collision layer 3."}, {"timestamp": [2713.0, 2714.42], "text": " Yeah, there's a deeper problem"}, {"timestamp": [2714.42, 2716.44], "text": " here with interoperability that I'm just thinking about"}, {"timestamp": [2716.44, 2717.92], "text": " in terms of metaverse."}, {"timestamp": [2718.84, 2719.8], "text": " That's the big challenge."}, {"timestamp": [2720.4, 2721.42], "text": " That's a big question, yeah."}, {"timestamp": [2721.88, 2724.38], "text": " I'll just let that..."}, {"timestamp": [2724.38, 2726.54], "text": " I'll leave that question alone for now"}, {"timestamp": [2726.54, 2734.26], "text": " sorry aaron continue no i'm i'm just uh making sure i i reply to to what you're saying because"}, {"timestamp": [2734.26, 2739.6], "text": " like yeah i completely agree understand and agree with like everything you're saying here it's just"}, {"timestamp": [2739.6, 2748.22], "text": " that like i wanted to make sure that you know that these are all questions that we've thought about before and that we're actively working on all the time."}, {"timestamp": [2761.56, 2763.9], "text": " proprietary platform and then"}, {"timestamp": [2763.9, 2766.06], "text": " getting at least one other"}, {"timestamp": [2766.06, 2768.42], "text": " platform or system"}, {"timestamp": [2768.42, 2770.46], "text": " to use that same type"}, {"timestamp": [2770.46, 2771.96], "text": " of thing."}, {"timestamp": [2772.3, 2774.22], "text": " It's something that we're trying to"}, {"timestamp": [2774.22, 2775.9], "text": " go for."}, {"timestamp": [2775.9, 2777.92], "text": " It's like in the group's"}, {"timestamp": [2777.92, 2778.2], "text": " name."}, {"timestamp": [2780.12, 2780.3], "text": " Yeah."}, {"timestamp": [2783.24, 2783.76], "text": " Yeah."}, {"timestamp": [2783.92, 2785.48], "text": " No, it makes sense. The layers make sense. Don't get me wrong. Collision layers absolutely Yeah, no, it makes sense."}, {"timestamp": [2785.48, 2786.44], "text": " The layers make sense."}, {"timestamp": [2786.44, 2787.1], "text": " Don't get me wrong."}, {"timestamp": [2787.1, 2788.68], "text": " Collision layers absolutely make sense"}, {"timestamp": [2788.68, 2794.38], "text": " to bring it to the standard."}, {"timestamp": [2794.38, 2797.02], "text": " But on the topic you brought up earlier"}, {"timestamp": [2797.02, 2798.94], "text": " of the slippery slope of including"}, {"timestamp": [2798.94, 2807.38], "text": " more and more things, the one thing that I have not included yet in this PR,"}, {"timestamp": [2807.94, 2809.38], "text": " and it's not in the existing spec either,"}, {"timestamp": [2809.48, 2813.12], "text": " but is in the Microsoft spec, is joints."}, {"timestamp": [2815.02, 2817.3], "text": " And joints would be for joining together"}, {"timestamp": [2817.3, 2819.26], "text": " two different physics bodies."}, {"timestamp": [2820.14, 2822.24], "text": " And that could be on a hinge and stuff."}, {"timestamp": [2822.24, 2826.92], "text": " And I am concerned that there's a slippery slope here."}, {"timestamp": [2827.4, 2835.3], "text": " I have already started with the joints, bringing in the joints, but I still don't like it."}, {"timestamp": [2837.02, 2846.62], "text": " So if I take a look at this branch that I have here, we have a lot of things related to joints there's like linear constraints"}, {"timestamp": [2846.62, 2854.7], "text": " angular constraints stiffness dampening position target they have to be uh there's a minimax and"}, {"timestamp": [2854.7, 2872.82], "text": " stiffness and dampening uh on on the limits as well they have to be referenced in the top level document. They have to be used on nodes. And also, Owen's proposing that we don't just have joints,"}, {"timestamp": [2872.82, 2874.36], "text": " but also have joint drives."}, {"timestamp": [2874.36, 2878.42], "text": " So you could have a joint that's trying to continuously spin,"}, {"timestamp": [2878.42, 2882.12], "text": " for example, or a joint that is trying to move an object"}, {"timestamp": [2882.12, 2885.44], "text": " to a specific target, like a motor."}, {"timestamp": [2886.2, 2889.0], "text": " I think a motor, we were thinking about motors"}, {"timestamp": [2889.0, 2893.38], "text": " because in the Avatar use case is that you've"}, {"timestamp": [2893.38, 2899.08], "text": " turned your character into a, what's it called, a ragdoll."}, {"timestamp": [2899.2, 2900.9], "text": " But you also want it to move things,"}, {"timestamp": [2902.36, 2903.9], "text": " like when it's dropped on the ground."}, {"timestamp": [2908.02, 2910.48], "text": " And so I can see that being useful it's more complicated"}, {"timestamp": [2910.48, 2910.9], "text": " though"}, {"timestamp": [2910.9, 2913.8], "text": " well these are meant for like physics joints you know"}, {"timestamp": [2913.8, 2915.9], "text": " for like mechanism not a skeleton"}, {"timestamp": [2915.9, 2916.68], "text": " or a ragdoll"}, {"timestamp": [2916.68, 2919.08], "text": " well once you ragdoll it becomes a physics object"}, {"timestamp": [2919.08, 2921.16], "text": " because it's not controlled by a character controller"}, {"timestamp": [2921.16, 2923.28], "text": " okay"}, {"timestamp": [2923.28, 2924.98], "text": " well anyway"}, {"timestamp": [2924.98, 2925.3], "text": " on the topic of like the scope and the slippery slope and stuff controlled by a character controller. Okay. Well, anyway,"}, {"timestamp": [2928.18, 2929.48], "text": " on the topic of the scope and the slippery slope and stuff,"}, {"timestamp": [2929.7, 2932.3], "text": " I kind of am against"}, {"timestamp": [2932.3, 2933.8], "text": " having this in the main spec"}, {"timestamp": [2933.8, 2934.98], "text": " because it's just so much."}, {"timestamp": [2935.78, 2937.9], "text": " Adding joints to the base physics spec"}, {"timestamp": [2937.9, 2939.96], "text": " increases the size of the base"}, {"timestamp": [2939.96, 2941.54], "text": " physics spec by an additional"}, {"timestamp": [2941.54, 2942.58], "text": " 40%."}, {"timestamp": [2942.58, 2947.58], "text": " It's quite big.'s like it's like"}, {"timestamp": [2947.58, 2957.68], "text": " 140 percent the the size or something um so i i think that it should just be a separate spec"}, {"timestamp": [2957.68, 2962.68], "text": " but then i raised this point with owen from microsoft and he doesn't understand by objection"}, {"timestamp": [2962.68, 2965.9], "text": " and he thinks that he tells me"}, {"timestamp": [2965.9, 2967.86], "text": " what physics simulation doesn't have joints"}, {"timestamp": [2967.86, 2969.48], "text": " and then I say a lot of them"}, {"timestamp": [2969.48, 2972.18], "text": " and he says well if we want to have joints"}, {"timestamp": [2972.18, 2974.12], "text": " in many of them and we agree"}, {"timestamp": [2974.12, 2976.16], "text": " on what joints are then shouldn't we put it in the base spec"}, {"timestamp": [2976.16, 2977.86], "text": " and I don't have a response for that"}, {"timestamp": [2977.86, 2978.3], "text": " because"}, {"timestamp": [2978.3, 2981.74], "text": " I don't know how to"}, {"timestamp": [2981.74, 2982.72], "text": " respond to that"}, {"timestamp": [2982.72, 2987.64], "text": " I guess it's a deeper I don't know how to respond to that."}, {"timestamp": [2999.68, 3002.96], "text": " I guess it's a deeper question about, like, is it intended that this wide-scale interoperability also includes... I mean, you're getting into deeper levels of simulation, right?"}, {"timestamp": [3003.78, 3005.02], "text": " Like, in the fields that i"}, {"timestamp": [3005.02, 3011.82], "text": " work in you know when we simulate something we come up with a process model before we even try"}, {"timestamp": [3011.82, 3018.56], "text": " to build anything this is a complete model that explains behavior of the system and it's like"}, {"timestamp": [3018.56, 3025.48], "text": " i couldn't write a spec that tells me what the model is going to be."}, {"timestamp": [3025.66, 3031.12], "text": " Just because joints behave some way in some specific physics simulation"}, {"timestamp": [3031.12, 3034.94], "text": " doesn't mean that that's how all joints behave."}, {"timestamp": [3036.68, 3037.2], "text": " Right."}, {"timestamp": [3037.5, 3042.1], "text": " And if, say, an engine doesn't have joints working the same way,"}, {"timestamp": [3042.76, 3046.6], "text": " it would be nice that they could mix and match the"}, {"timestamp": [3046.6, 3052.1], "text": " base physics spec with a different joint system, versus if it's all-in-one, then they have"}, {"timestamp": [3052.1, 3053.02], "text": " to support everything."}, {"timestamp": [3053.38, 3056.84], "text": " Or you're not allowed to have box colliders unless you support joints as well."}, {"timestamp": [3061.82, 3067.86], "text": " So it's a question of scoping, but this is not a hill I will die on, and it's a question of scoping but like it's this is not a hill i will die on and it's a hill"}, {"timestamp": [3067.86, 3075.36], "text": " that for the past two years owen and chronos have told me that they're going to put joints"}, {"timestamp": [3075.36, 3094.82], "text": " in the main physics spec and that's final The hope is that despite the problems of scope, in theory this means that they will attempt"}, {"timestamp": [3094.82, 3107.36], "text": " to get the Chronos members existing engines like the Microsoft physics engine and they will try to get like unity and unreal engine and like a like a web uh"}, {"timestamp": [3108.16, 3117.76], "text": " physics renderer uh with these specs so that that is i would consider that like a like a win"}, {"timestamp": [3121.36, 3128.66], "text": " yeah i mean whether the model is universal enough to apply to all scenarios that's"}, {"timestamp": [3128.66, 3133.06], "text": " probably yet to be seen but i guess if you standardize the way that joints work"}, {"timestamp": [3133.06, 3139.04], "text": " well not how they work we're not talking about the implementation we're just talking about the"}, {"timestamp": [3139.04, 3145.5], "text": " way that the data yeah the data representation but it's like also"}, {"timestamp": [3145.5, 3146.96], "text": " accompanied by like"}, {"timestamp": [3146.96, 3149.64], "text": " a large you know"}, {"timestamp": [3149.64, 3151.44], "text": " markdown document with"}, {"timestamp": [3151.44, 3153.4], "text": " detailing what"}, {"timestamp": [3153.4, 3155.22], "text": " the behavior is supposed to be"}, {"timestamp": [3155.22, 3157.58], "text": " so that engines will know how to implement it"}, {"timestamp": [3157.58, 3159.46], "text": " and what like what's supposed to happen"}, {"timestamp": [3159.46, 3161.14], "text": " with these joints and such"}, {"timestamp": [3161.14, 3163.5], "text": " I don't know what their pushback is"}, {"timestamp": [3163.5, 3166.22], "text": " on all physics simulations use joints."}, {"timestamp": [3166.22, 3169.08], "text": " That's basically only in the world of 3d graphics,"}, {"timestamp": [3169.08, 3174.98], "text": " like physics simulations that use finite element analysis are not using."}, {"timestamp": [3177.66, 3179.02], "text": " It's always about a degree."}, {"timestamp": [3179.24, 3179.42], "text": " What,"}, {"timestamp": [3179.52, 3181.54], "text": " what level of fidelity do you want?"}, {"timestamp": [3181.62, 3181.86], "text": " Right."}, {"timestamp": [3181.86, 3184.86], "text": " You're not doing a simulation for,"}, {"timestamp": [3189.3, 3195.7], "text": " you know, trying to some of the also note some of the chronos perspectives are like uh some of the chronos"}, {"timestamp": [3195.7, 3202.1], "text": " members are like pixar and the pixar people say like oh well in our animation software we've"}, {"timestamp": [3202.1, 3205.58], "text": " always had this for decades of why why shouldn't we have it in the spec"}, {"timestamp": [3205.58, 3207.98], "text": " we were talking about a feature that"}, {"timestamp": [3207.98, 3209.64], "text": " seems a lot like"}, {"timestamp": [3209.64, 3212.54], "text": " what could be implemented by a finite"}, {"timestamp": [3212.54, 3214.6], "text": " element analysis"}, {"timestamp": [3214.6, 3215.94], "text": " which is that"}, {"timestamp": [3215.94, 3217.22], "text": " every frame"}, {"timestamp": [3217.22, 3220.22], "text": " it is like represented"}, {"timestamp": [3220.22, 3222.26], "text": " by a VLTF"}, {"timestamp": [3222.26, 3223.82], "text": " blend shape"}, {"timestamp": [3223.82, 3226.94], "text": " and we would expect that every frame,"}, {"timestamp": [3227.12, 3231.38], "text": " we would have to convert it to like a collision"}, {"timestamp": [3231.38, 3233.94], "text": " and then simulate it per frame,"}, {"timestamp": [3234.12, 3241.14], "text": " which is very stressful and difficult for games."}, {"timestamp": [3241.52, 3244.24], "text": " But it is something you could do"}, {"timestamp": [3244.24, 3246.08], "text": " with a finite element simulation."}, {"timestamp": [3248.72, 3257.68], "text": " Like you literally check the heavy frame and move and migrate the the math through the elements."}, {"timestamp": [3269.48, 3272.24], "text": " This is without like, adding any additional, like, types of. Mashes to the."}, {"timestamp": [3275.54, 3288.4], "text": " Yeah, but presumably there's some sort of personal logic that needs like, uh, you know, a, um. what's the term I'm looking for proper typology in the mesh to understand where the enclosed volume is"}, {"timestamp": [3288.4, 3291.2], "text": " and then breaking it up into pieces and then iterating on all those pieces"}, {"timestamp": [3291.2, 3292.58], "text": " doing something like that"}, {"timestamp": [3292.58, 3298.82], "text": " yeah but it's kind of not specified how you solve"}, {"timestamp": [3298.82, 3302.62], "text": " this is what is there to be solved"}, {"timestamp": [3302.62, 3307.92], "text": " here's the data that is available and then go have fun and solve it."}, {"timestamp": [3309.2, 3310.2], "text": " So Aaron, what kind of changes?"}, {"timestamp": [3310.28, 3311.78], "text": " Sorry, I know you went through them pretty quick."}, {"timestamp": [3311.9, 3314.88], "text": " What kind of changes to the existing spec?"}, {"timestamp": [3315.1, 3316.26], "text": " What would it look like?"}, {"timestamp": [3318.44, 3323.9], "text": " Yeah, so for joints or physics materials or filtering or what?"}, {"timestamp": [3329.0, 3332.98], "text": " I mean, I thought you were talking about you know introducing joints between physics bodies um so i guess i was curious about"}, {"timestamp": [3332.98, 3336.46], "text": " physics bodies primarily and you said there was a higher level change"}, {"timestamp": [3336.46, 3346.04], "text": " the root node had to include some information for it? Yeah, so here's..."}, {"timestamp": [3347.04, 3351.02], "text": " So I started actually working on all three"}, {"timestamp": [3351.02, 3352.78], "text": " and then I ended up splitting materials and filtering"}, {"timestamp": [3352.78, 3355.0], "text": " to be done first because I was more confident in those."}, {"timestamp": [3355.16, 3360.34], "text": " But here's the diff with just the joints added."}, {"timestamp": [3361.04, 3363.04], "text": " So as you can see here that there's..."}, {"timestamp": [3364.58, 3366.28], "text": " On the top level"}, {"timestamp": [3366.28, 3368.08], "text": " the"}, {"timestamp": [3368.08, 3369.72], "text": " document schema will reference"}, {"timestamp": [3369.72, 3371.2], "text": " a list of joints."}, {"timestamp": [3371.98, 3373.6], "text": " The node is"}, {"timestamp": [3373.6, 3376.0], "text": " able to reference a joint, just"}, {"timestamp": [3376.0, 3378.0], "text": " like it can already reference a motion, a"}, {"timestamp": [3378.0, 3380.08], "text": " collider, or a trigger. And"}, {"timestamp": [3380.08, 3382.04], "text": " then four new"}, {"timestamp": [3382.04, 3384.24], "text": " schemas are added to define"}, {"timestamp": [3384.24, 3385.22], "text": " joints,"}, {"timestamp": [3385.58, 3389.02], "text": " define joint limits, define joint drives like motors,"}, {"timestamp": [3389.36, 3396.0], "text": " and define how a node uses those joints with a connected object."}, {"timestamp": [3398.08, 3403.24], "text": " So that's four new schemas and two altered to add joints."}, {"timestamp": [3405.5, 3405.74], "text": " I mean, it's not too big, I guess, new schemas and two altered to add joints. It's"}, {"timestamp": [3405.74, 3408.12], "text": " I mean, it's not"}, {"timestamp": [3408.12, 3410.16], "text": " too big, I guess, but"}, {"timestamp": [3410.16, 3412.3], "text": " another thing worth"}, {"timestamp": [3412.3, 3413.4], "text": " considering is that"}, {"timestamp": [3413.4, 3418.9], "text": " it kind of"}, {"timestamp": [3418.9, 3421.72], "text": " massively increases the"}, {"timestamp": [3421.72, 3423.68], "text": " API surface of the"}, {"timestamp": [3423.68, 3427.98], "text": " animation pointer."}, {"timestamp": [3427.98, 3438.62], "text": " I forget where I have this, but there's like,"}, {"timestamp": [3438.62, 3440.16], "text": " I thought I already wrote it somewhere,"}, {"timestamp": [3440.16, 3445.62], "text": " but there's a list of, actually, it's written on Owen's repos."}, {"timestamp": [3445.68, 3446.42], "text": " Let me just go there."}, {"timestamp": [3448.64, 3451.44], "text": " Sorry, a lot of branches can be hard to navigate"}, {"timestamp": [3451.44, 3453.74], "text": " because they work on this stuff."}, {"timestamp": [3453.92, 3456.6], "text": " And then we only discuss it once a week at the OMI meeting."}, {"timestamp": [3456.8, 3461.5], "text": " So stuff only gets proceeded through at a finite rate."}, {"timestamp": [3461.5, 3461.98], "text": " You know?"}, {"timestamp": [3467.3, 3470.18], "text": " You're losing me a little bit in terms of this API surface"}, {"timestamp": [3470.18, 3471.64], "text": " increase you're talking about."}, {"timestamp": [3471.64, 3473.0], "text": " Sorry, sorry."}, {"timestamp": [3473.0, 3476.68], "text": " Here's what I was talking about."}, {"timestamp": [3476.68, 3482.46], "text": " So one of the features of GLTF that"}, {"timestamp": [3482.46, 3485.96], "text": " is introduced fairly recently is called the GLTF object model,"}, {"timestamp": [3486.36, 3489.28], "text": " which allows you to reference properties of a GLTF"}, {"timestamp": [3489.28, 3492.3], "text": " and do things like animate them or script them."}, {"timestamp": [3493.12, 3495.32], "text": " So you can, for example, import an animation"}, {"timestamp": [3495.32, 3498.82], "text": " that changes the stiffness of a joint over time"}, {"timestamp": [3498.82, 3501.04], "text": " or that changes the mass of a body over time."}, {"timestamp": [3502.18, 3502.84], "text": " I see what you're saying."}, {"timestamp": [3503.32, 3504.28], "text": " Animatable properties."}, {"timestamp": [3504.48, 3506.06], "text": " Okay, I got you yeah yeah"}, {"timestamp": [3506.06, 3517.34], "text": " yeah yeah and um if you take a look here uh this is the the entire list of uh properties that's"}, {"timestamp": [3517.34, 3525.26], "text": " allowed by the owens physics extension and uh this is all of them it just barely fits in the screen"}, {"timestamp": [3525.26, 3527.94], "text": " and these are all the ones for"}, {"timestamp": [3527.94, 3530.22], "text": " joints so adding joints"}, {"timestamp": [3530.22, 3532.42], "text": " kind of doubles this API surface"}, {"timestamp": [3532.42, 3536.1], "text": " I think probably the biggest problem"}, {"timestamp": [3536.1, 3538.1], "text": " you're left with is like I see exactly what you're saying"}, {"timestamp": [3538.1, 3540.12], "text": " you're increasing the spec size you increase this"}, {"timestamp": [3540.12, 3542.04], "text": " this other animatable properties"}, {"timestamp": [3542.04, 3544.24], "text": " you know I haven't looked into"}, {"timestamp": [3544.24, 3545.94], "text": " the glTF objects back yet,"}, {"timestamp": [3546.06, 3548.3], "text": " but it's like, if you don't have it in the standard,"}, {"timestamp": [3549.04, 3551.4], "text": " if you don't have this, then what's the alternative?"}, {"timestamp": [3551.74, 3553.18], "text": " You end up with rinky-dink."}, {"timestamp": [3554.7, 3558.02], "text": " The alternative is that we build another standard"}, {"timestamp": [3558.02, 3559.48], "text": " that builds on top of this standard."}, {"timestamp": [3561.38, 3561.82], "text": " How?"}, {"timestamp": [3563.18, 3567.04], "text": " Okay, I'm going to not ask too many questions here"}, {"timestamp": [3567.04, 3567.9], "text": " because we're gonna be here all day"}, {"timestamp": [3567.9, 3570.5], "text": " the answer how is that"}, {"timestamp": [3570.5, 3571.38], "text": " like you just"}, {"timestamp": [3571.38, 3573.84], "text": " like GLTF is a standard"}, {"timestamp": [3573.84, 3575.54], "text": " and this is a GLTF extension"}, {"timestamp": [3575.54, 3576.72], "text": " that extends that standard"}, {"timestamp": [3576.72, 3578.48], "text": " you can make another extension"}, {"timestamp": [3578.48, 3579.68], "text": " that extends GLTF"}, {"timestamp": [3579.68, 3580.68], "text": " it depends on"}, {"timestamp": [3580.68, 3583.8], "text": " the rigid body spec"}, {"timestamp": [3583.8, 3584.64], "text": " or"}, {"timestamp": [3584.64, 3588.38], "text": " you can have an extension that extends the extension."}, {"timestamp": [3588.68, 3590.36], "text": " So there's actually multiple ways to do it."}, {"timestamp": [3592.54, 3595.9], "text": " So these are always things that are extendable."}, {"timestamp": [3597.22, 3599.72], "text": " But anyway, even though I just spent a long time"}, {"timestamp": [3599.72, 3605.78], "text": " pitching to you that joints are something that Kronos wants to"}, {"timestamp": [3605.78, 3607.84], "text": " that I"}, {"timestamp": [3607.84, 3609.3], "text": " believe joints should be separate"}, {"timestamp": [3609.3, 3612.08], "text": " Kronos wants joints to be on the same spec"}, {"timestamp": [3612.08, 3613.1], "text": " so"}, {"timestamp": [3613.1, 3615.64], "text": " that's probably what we're going to go with"}, {"timestamp": [3615.64, 3623.78], "text": " I mean I think you're fighting"}, {"timestamp": [3623.78, 3625.52], "text": " too much momentum there."}, {"timestamp": [3626.18, 3626.42], "text": " Yeah."}, {"timestamp": [3627.08, 3629.56], "text": " So I'm not fighting this anymore."}, {"timestamp": [3632.18, 3635.32], "text": " I want to move things forward."}, {"timestamp": [3635.5, 3637.26], "text": " I don't want to drag my feet, you know?"}, {"timestamp": [3638.16, 3643.26], "text": " So that's why I have this PR that gets us part of the way there"}, {"timestamp": [3643.26, 3647.12], "text": " to adding physics materials and filtering."}, {"timestamp": [3647.12, 3651.26], "text": " And we can look at the diff here."}, {"timestamp": [3651.26, 3653.58], "text": " Some of these are just like minor formatting changes"}, {"timestamp": [3653.58, 3656.12], "text": " that there's."}, {"timestamp": [3656.12, 3658.2], "text": " There's actually a cool story"}, {"timestamp": [3658.2, 3660.32], "text": " we can talk about the compound colliders,"}, {"timestamp": [3660.32, 3662.16], "text": " if you've got a moment."}, {"timestamp": [3662.16, 3663.44], "text": " Sure, go ahead and talk."}, {"timestamp": [3665.76, 3667.88], "text": " There's actually a close story"}, {"timestamp": [3667.88, 3673.06], "text": " that we as Kronos and OMI group,"}, {"timestamp": [3673.18, 3674.6], "text": " we actually got together"}, {"timestamp": [3674.6, 3678.9], "text": " and discussed one part of the physics standard,"}, {"timestamp": [3679.1, 3680.1], "text": " which is, I think it's called,"}, {"timestamp": [3680.52, 3681.82], "text": " what was the term they called it?"}, {"timestamp": [3681.88, 3682.84], "text": " Compound colliders?"}, {"timestamp": [3683.48, 3686.5], "text": " Well, it's only for triggers compound triggers yeah compound"}, {"timestamp": [3686.5, 3688.44], "text": " triggers and we"}, {"timestamp": [3688.44, 3689.08], "text": " actually"}, {"timestamp": [3689.08, 3691.36], "text": " weren't"}, {"timestamp": [3691.36, 3694.6], "text": " entirely happy with the way"}, {"timestamp": [3694.6, 3696.46], "text": " that it was but we got together"}, {"timestamp": [3696.46, 3697.78], "text": " and we"}, {"timestamp": [3697.78, 3699.7], "text": " got"}, {"timestamp": [3699.7, 3702.58], "text": " both sides to agree that"}, {"timestamp": [3702.58, 3704.68], "text": " these should be"}, {"timestamp": [3704.68, 3706.16], "text": " added to the spec."}, {"timestamp": [3708.08, 3708.78], "text": " Can you explain"}, {"timestamp": [3708.78, 3710.42], "text": " this difference more"}, {"timestamp": [3710.42, 3712.5], "text": " precisely? I'm having trouble."}, {"timestamp": [3713.28, 3714.66], "text": " So this was a meeting that"}, {"timestamp": [3714.66, 3716.3], "text": " happened, I think, back in February."}, {"timestamp": [3717.0, 3718.6], "text": " So a few months back."}, {"timestamp": [3719.08, 3719.18], "text": " And"}, {"timestamp": [3719.18, 3722.66], "text": " one of the big differences between the"}, {"timestamp": [3723.24, 3724.46], "text": " OMI physics spec and the"}, {"timestamp": [3724.46, 3727.18], "text": " Kronos-Owens Microsoft physics differences between the OMI physics spec and the Kronos OWN Microsoft physics spec"}, {"timestamp": [3727.18, 3730.0], "text": " is that OMI allowed for compound triggers."}, {"timestamp": [3730.44, 3733.78], "text": " So you can have multiple box gliders in one trigger,"}, {"timestamp": [3734.24, 3735.54], "text": " and that would allow you to make, for example,"}, {"timestamp": [3735.62, 3737.22], "text": " an L-shaped trigger volume."}, {"timestamp": [3739.24, 3742.62], "text": " But the Microsoft spec only allowed one shape per trigger."}, {"timestamp": [3744.24, 3746.26], "text": " So you could not make an L shape."}, {"timestamp": [3746.52, 3748.12], "text": " You just have to have a box"}, {"timestamp": [3748.12, 3749.42], "text": " as just a single trigger."}, {"timestamp": [3750.28, 3752.2], "text": " And the solution"}, {"timestamp": [3752.2, 3754.14], "text": " that Owen and Microsoft"}, {"timestamp": [3754.14, 3756.06], "text": " was saying is that you should have"}, {"timestamp": [3756.06, 3760.24], "text": " you should just in some"}, {"timestamp": [3760.24, 3762.0], "text": " other layer on top of that"}, {"timestamp": [3762.0, 3763.6], "text": " combine those inputs together."}, {"timestamp": [3765.22, 3766.1], "text": " But then"}, {"timestamp": [3766.1, 3767.8], "text": " we discussed that all"}, {"timestamp": [3767.8, 3769.94], "text": " the complications that arise with that"}, {"timestamp": [3769.94, 3771.66], "text": " and that"}, {"timestamp": [3771.66, 3773.8], "text": " this would be really tricky to implement"}, {"timestamp": [3773.8, 3775.8], "text": " because Githo's area nodes"}, {"timestamp": [3775.8, 3778.06], "text": " support multiple shapes"}, {"timestamp": [3778.06, 3779.52], "text": " coming together into one area."}, {"timestamp": [3780.22, 3782.22], "text": " And we ended up bringing in"}, {"timestamp": [3782.22, 3784.0], "text": " another guy from Kronos,"}, {"timestamp": [3784.26, 3787.56], "text": " the guy working on the scripting system at Kronos."}, {"timestamp": [3788.1, 3790.0], "text": " And we discussed this for like an hour."}, {"timestamp": [3790.24, 3794.98], "text": " And then he ended up agreeing that we should have compound triggers in the spec."}, {"timestamp": [3795.62, 3801.38], "text": " So then we ended up coming up with a new solution called this nodes property."}, {"timestamp": [3802.2, 3804.76], "text": " It was different from what Omi was doing before."}, {"timestamp": [3804.76, 3807.34], "text": " Because before it was just like Omi was declaring like an empty nodes property. It was different from what OMI was doing before, because before it was just like OMI was declaring"}, {"timestamp": [3807.34, 3808.76], "text": " like an empty trigger property."}, {"timestamp": [3809.04, 3811.5], "text": " And it just like, okay, here's a trigger with no shapes."}, {"timestamp": [3811.6, 3813.9], "text": " Its only purpose is to combine shapes underneath it."}, {"timestamp": [3814.42, 3817.02], "text": " But then Owen and Kronos didn't like that."}, {"timestamp": [3817.12, 3819.04], "text": " So we ended up coming up with a new solution"}, {"timestamp": [3819.04, 3822.46], "text": " where the parent explicitly references the child nodes"}, {"timestamp": [3822.46, 3824.08], "text": " that it is compounding."}, {"timestamp": [3824.4, 3830.36], "text": " A cool imaginary use case we were talking about for this"}, {"timestamp": [3830.36, 3836.48], "text": " was that we had a compound trigger which stayed the same,"}, {"timestamp": [3836.82, 3840.48], "text": " but the idea is that every iteration,"}, {"timestamp": [3840.76, 3844.06], "text": " the complete world would be completely different"}, {"timestamp": [3844.06, 3849.0], "text": " where all the nodes and contents would be different."}, {"timestamp": [3849.0, 3855.72], "text": " And you could use this as a grouping for an entire level."}, {"timestamp": [3855.72, 3858.42], "text": " And that was, I think, the use case"}, {"timestamp": [3858.42, 3865.66], "text": " that brought the spec writer from the scripting over."}, {"timestamp": [3869.96, 3874.14], "text": " Yeah, no, I understand that completely."}, {"timestamp": [3874.14, 3877.64], "text": " I know how I would implement this."}, {"timestamp": [3877.64, 3881.3], "text": " Sounds like you can either provide it."}, {"timestamp": [3881.3, 3882.52], "text": " I might have this wrong."}, {"timestamp": [3882.52, 3889.04], "text": " But it sounds like you can either provide it the indices of the shapes."}, {"timestamp": [3889.62, 3891.5], "text": " Sorry, I forget how it works in OMI."}, {"timestamp": [3891.62, 3893.92], "text": " Is it GLT, OMI physics shape?"}, {"timestamp": [3894.24, 3896.04], "text": " Is that what that index is that goes in nodes?"}, {"timestamp": [3896.32, 3898.86], "text": " It's actually an index of child nodes."}, {"timestamp": [3899.48, 3900.96], "text": " Okay, it's an index of child nodes."}, {"timestamp": [3901.22, 3904.7], "text": " So yeah, and I mean, even when you're authoring this type of app."}, {"timestamp": [3904.7, 3907.66], "text": " You need to use child nodes for the shapes"}, {"timestamp": [3907.66, 3909.98], "text": " if you want the shapes to have a transform"}, {"timestamp": [3909.98, 3911.94], "text": " because the transform is"}, {"timestamp": [3911.94, 3913.74], "text": " defined on the level of the GLTF node"}, {"timestamp": [3913.74, 3915.12], "text": " so that's why we're doing it that way"}, {"timestamp": [3915.12, 3917.98], "text": " 100% makes sense because when you're going to author"}, {"timestamp": [3917.98, 3919.6], "text": " this you're going to"}, {"timestamp": [3919.6, 3921.94], "text": " use some tool to create all these"}, {"timestamp": [3921.94, 3923.94], "text": " shapes and they're going to have a position"}, {"timestamp": [3923.94, 3925.3], "text": " in space so once the shape is set and they are going to have a position in space."}, {"timestamp": [3925.3, 3928.88], "text": " So once the shape is set, and once that node carries"}, {"timestamp": [3928.88, 3931.68], "text": " around that position information, yeah."}, {"timestamp": [3931.68, 3933.24], "text": " So it makes perfect sense."}, {"timestamp": [3933.24, 3934.9], "text": " It's very cool."}, {"timestamp": [3934.9, 3937.06], "text": " Yeah, and this is in contrast to Unity,"}, {"timestamp": [3937.06, 3941.08], "text": " which has offset as one of the properties of a shape."}, {"timestamp": [3941.08, 3943.56], "text": " And I find that really weird because it's"}, {"timestamp": [3943.56, 3946.7], "text": " duplicating the fact that the game object already has a shape. And I find that really weird because it's duplicating the fact that the game object already"}, {"timestamp": [3946.7, 3947.54], "text": " has a transform."}, {"timestamp": [3951.6, 3954.14], "text": " Yeah, it should just inherit."}, {"timestamp": [3954.14, 3958.14], "text": " And that system sucks too because you can't."}, {"timestamp": [3958.14, 3962.84], "text": " Like I think about in Godot, I always mess this up."}, {"timestamp": [3962.84, 3963.54], "text": " What is it called?"}, {"timestamp": [3963.54, 3965.46], "text": " Collision shape 3D?"}, {"timestamp": [3968.12, 3969.92], "text": " The node that contains the shape resource?"}, {"timestamp": [3972.66, 3972.78], "text": " That's the move around with the parent body, right?"}, {"timestamp": [3972.9, 3973.68], "text": " Yeah."}, {"timestamp": [3975.78, 3976.2], "text": " Which is intuitive."}, {"timestamp": [3976.9, 3978.24], "text": " It's very intuitive."}, {"timestamp": [3978.8, 3991.76], "text": " Yeah. The way that Godot does physics is, I think, pretty simple and straightforward, but other"}, {"timestamp": [3991.76, 3994.84], "text": " people might disagree and say that their system is more simple and straightforward."}, {"timestamp": [3995.72, 4002.72], "text": " So in Godot, every physics object has a body, and bodies are the main thing that do their"}, {"timestamp": [4002.72, 4006.96], "text": " interaction in the world, and they move all their children with them."}, {"timestamp": [4007.64, 4014.96], "text": " But then in Unity, you have a shape can by itself be used just in the world."}, {"timestamp": [4015.52, 4017.94], "text": " And you can move it around through whatever mechanism you want."}, {"timestamp": [4018.02, 4020.32], "text": " And it'll still allow objects to collide with it."}, {"timestamp": [4021.02, 4024.56], "text": " And you don't have to have a body as an ancestor node."}, {"timestamp": [4025.94, 4028.06], "text": " This is in big contrast to Godot,"}, {"timestamp": [4028.06, 4030.62], "text": " where you have to put a static body if he wants"}, {"timestamp": [4030.62, 4032.28], "text": " to have a non-moving collider."}, {"timestamp": [4043.32, 4045.64], "text": " One of the big remaining differences"}, {"timestamp": [4045.64, 4049.08], "text": " between the OMI spec and the Kurodo spec"}, {"timestamp": [4049.08, 4052.6], "text": " is that in OMI, we have motion."}, {"timestamp": [4054.24, 4057.9], "text": " And motion can be set to either static, kinematic, or dynamic."}, {"timestamp": [4060.24, 4069.24], "text": " And so you do type dynamic or type kinematic, for example, to specify it's dynamic or kinematic."}, {"timestamp": [4070.2, 4078.74], "text": " But then in the Microsoft spec, what you have is a Boolean flag called isKinematic, and you set that to true or false."}, {"timestamp": [4079.74, 4085.6], "text": " So if it's a dynamic body, you have to do isKin false, and if it's kinematic, it's kinematic true."}, {"timestamp": [4086.32, 4088.22], "text": " And you cannot represent static"}, {"timestamp": [4088.22, 4090.18], "text": " bodies with that. You can just do a kinematic"}, {"timestamp": [4090.18, 4092.24], "text": " body and not move it if you want a static"}, {"timestamp": [4092.24, 4092.58], "text": " body."}, {"timestamp": [4101.04, 4101.52], "text": " So,"}, {"timestamp": [4101.94, 4103.78], "text": " sorry, I was distracting. What's the"}, {"timestamp": [4103.78, 4106.08], "text": " gap is in the static"}, {"timestamp": [4106.08, 4107.16], "text": " bodies being movable"}, {"timestamp": [4107.16, 4109.98], "text": " well"}, {"timestamp": [4109.98, 4112.32], "text": " basically the gap is that"}, {"timestamp": [4112.32, 4113.98], "text": " there's"}, {"timestamp": [4113.98, 4116.12], "text": " a distinction between"}, {"timestamp": [4116.12, 4118.08], "text": " static and kinematic bodies and"}, {"timestamp": [4118.08, 4120.08], "text": " it's clear"}, {"timestamp": [4120.08, 4122.1], "text": " from a static body that it's not expected to"}, {"timestamp": [4122.1, 4124.1], "text": " move right but then"}, {"timestamp": [4124.1, 4126.18], "text": " in the Microsoft physics spec you can't define a static body that's not expected to move, right? But then in the Microsoft physics spec,"}, {"timestamp": [4126.44, 4127.98], "text": " you can't define a static body."}, {"timestamp": [4131.5, 4133.86], "text": " I mean, that's debatable, right?"}, {"timestamp": [4133.96, 4136.22], "text": " Like in Godot, don't they say in the documentation"}, {"timestamp": [4136.22, 4138.4], "text": " that you can animate a static body?"}, {"timestamp": [4138.86, 4140.26], "text": " It just doesn't have physics properties"}, {"timestamp": [4140.26, 4141.6], "text": " like gravity applied to it."}, {"timestamp": [4143.34, 4148.0], "text": " You can animate it, but it's not going to teleport every frame."}, {"timestamp": [4148.0, 4150.58], "text": " It's not going to push objects in front of it to somewhere else,"}, {"timestamp": [4150.58, 4154.38], "text": " because it's not intended to be moving."}, {"timestamp": [4154.38, 4156.28], "text": " There is also AnimatableBody, which"}, {"timestamp": [4156.28, 4159.92], "text": " syncs to the animation system, but it's still"}, {"timestamp": [4159.92, 4181.36], "text": " doing teleporting every frame."}, {"timestamp": [4183.62, 4184.0], "text": " Now that it's silent, I can hear the birds chirping."}, {"timestamp": [4186.0, 4186.18], "text": " And it's because I still got the mirror opened in the background."}, {"timestamp": [4187.32, 4189.06], "text": " There's like ambient sound."}, {"timestamp": [4190.04, 4190.42], "text": " It's not just in your head."}, {"timestamp": [4190.52, 4190.88], "text": " Yeah."}, {"timestamp": [4191.82, 4193.64], "text": " Ambient birds."}, {"timestamp": [4194.26, 4196.04], "text": " It's funny."}, {"timestamp": [4196.92, 4197.26], "text": " Random question."}, {"timestamp": [4197.84, 4198.06], "text": " Completely unrelated."}, {"timestamp": [4200.38, 4200.64], "text": " Are they using like geometry clip map for the terrain?"}, {"timestamp": [4201.24, 4204.04], "text": " What are they doing here?"}, {"timestamp": [4205.32, 4206.78], "text": " This is height map terrain."}, {"timestamp": [4207.06, 4209.88], "text": " So it's generated from an image."}, {"timestamp": [4211.56, 4214.02], "text": " You said this is"}, {"timestamp": [4214.02, 4215.56], "text": " not Godot, right? This is something else."}, {"timestamp": [4215.9, 4216.6], "text": " This is Godot."}, {"timestamp": [4218.92, 4220.0], "text": " I've been asking this"}, {"timestamp": [4220.0, 4222.0], "text": " question and I can't get people to answer"}, {"timestamp": [4222.0, 4223.82], "text": " it for me. How do you load a texture"}, {"timestamp": [4223.82, 4226.12], "text": " into the vertex shader in Godot?"}, {"timestamp": [4226.12, 4228.44], "text": " Is that a thing you can do in GDScript?"}, {"timestamp": [4228.44, 4232.82], "text": " I have no clue, but all of this is done in GDScript, I think."}, {"timestamp": [4232.82, 4238.42], "text": " It's just this project has a million lines of GDScript"}, {"timestamp": [4238.42, 4239.78], "text": " code."}, {"timestamp": [4239.78, 4245.8], "text": " What do you mean by load a vertex from GDScript?"}, {"timestamp": [4245.8, 4247.1], "text": " Isn't it shader?"}, {"timestamp": [4247.1, 4250.24], "text": " Isn't this stuff all shader?"}, {"timestamp": [4250.24, 4250.98], "text": " Yeah, yeah, yeah."}, {"timestamp": [4250.98, 4255.12], "text": " But in the vertex shader, in modern OpenGL or DirectX 10,"}, {"timestamp": [4255.12, 4258.42], "text": " I think they introduced it, you bring in a texture"}, {"timestamp": [4258.42, 4261.0], "text": " representing the height of the terrain into the vertex shader."}, {"timestamp": [4261.0, 4264.24], "text": " And then it dynamically draws that."}, {"timestamp": [4264.24, 4266.1], "text": " I'm not sure that's a thing."}, {"timestamp": [4266.1, 4271.82], "text": " You have to go through every single image"}, {"timestamp": [4271.82, 4279.16], "text": " and then apply the effective free to, let's say, a square."}, {"timestamp": [4279.16, 4280.06], "text": " Like a quad."}, {"timestamp": [4284.96, 4286.38], "text": " And then you have to"}, {"timestamp": [4286.38, 4288.04], "text": " deal with"}, {"timestamp": [4288.04, 4290.0], "text": " making the edges so when you"}, {"timestamp": [4290.0, 4292.4], "text": " cut them apart, they have skirts"}, {"timestamp": [4292.4, 4294.12], "text": " so they don't see the distance."}, {"timestamp": [4295.8, 4297.58], "text": " There's an NVIDIA..."}, {"timestamp": [4297.58, 4299.06], "text": " You guys have seen the Graphics Gems"}, {"timestamp": [4299.06, 4300.14], "text": " articles from NVIDIA?"}, {"timestamp": [4302.54, 4303.34], "text": " Yes? No?"}, {"timestamp": [4304.26, 4305.96], "text": " There's one on my clipmap terrains."}, {"timestamp": [4306.4, 4308.92], "text": " The most popular one people reference"}, {"timestamp": [4308.92, 4312.32], "text": " is the one from Battlefield 3 for clipmaps."}, {"timestamp": [4314.04, 4315.3], "text": " I'll share this one too."}, {"timestamp": [4315.48, 4317.26], "text": " I'm trying to implement this in GDScript."}, {"timestamp": [4317.36, 4318.08], "text": " Anyways, unrelated."}, {"timestamp": [4318.08, 4321.94], "text": " But I do have to run."}, {"timestamp": [4322.38, 4324.1], "text": " But this has been very cool."}, {"timestamp": [4324.5, 4326.0], "text": " I love the work that this"}, {"timestamp": [4326.0, 4332.16], "text": " group is doing and i'm very excited to see uh kind of portability we can get in assets"}, {"timestamp": [4332.16, 4358.18], "text": " so it was nice nice meeting everyone that hadn't met before so i'll see you later All right, so does anybody"}, {"timestamp": [4358.18, 4360.74], "text": " want to"}, {"timestamp": [4360.74, 4362.84], "text": " review the PRs"}, {"timestamp": [4362.84, 4363.4], "text": " that I opened?"}, {"timestamp": [4363.4, 4363.86], "text": " Or"}, {"timestamp": [4363.86, 4366.46], "text": " If people want to stay, please to review the PRs that I opened?"}, {"timestamp": [4368.12, 4368.54], "text": " If people want to stay,"}, {"timestamp": [4370.18, 4371.7], "text": " please speak up."}, {"timestamp": [4372.32, 4373.44], "text": " We are over meeting time, actually."}, {"timestamp": [4374.08, 4376.28], "text": " Yeah, I have to"}, {"timestamp": [4376.28, 4378.04], "text": " be somewhere in five minutes."}, {"timestamp": [4379.18, 4380.22], "text": " Alright, well, at least"}, {"timestamp": [4380.22, 4382.04], "text": " we had a good conversation with Michael Jared."}, {"timestamp": [4383.3, 4383.94], "text": " Yeah, it was cool."}, {"timestamp": [4384.66, 4385.34], "text": " Good stuff."}], "text": " they have always given me the reply, or, I mean, I asked them once, so the only reply they gave me is that they're only interested in doing official finalized Cronus extensions, so not any from any other third party. So, like, if we want physics to be implemented in Blender out of the box, like, and we want audio to be implemented in Blender out of the box without and we want audio to be implemented in Blender out of the box without installing any add-ons at all, then the only option is to get it through Chronos, because it's the only way Blender is going to agree to it. Same thing with Unreal Engine. You're going to have to install an add-on or something to get OMI extensions supported in there. Which is not necessarily a bad thing, because that allows for independent development. And it's not that much work. But it is one hurdle that can hurt adoption if people have to seek out something. I think, though, Blender users are quite used to installing add-ons same with same with unreal same with you know so i i don't know if you're going to get blender buy-in from my experience contributing to blender it takes it's so slow to get anything changed in a major way and it sounds like they wouldn't do it without official buy-off from chronos right yep i made one pull request to blender and it took months to get merged so yeah i totally get that so and the interesting thing it was only like i was looking through pull requests on blender's il repository and it was only well okay i say it's been four years now okay so it's four years ago but the the true capacity to even extend gltf seems like it wasn't there until 2020 where someone opened an issue and said hey i'm trying to extend gltf and it does not work they fixed it obviously um but now you can you know obviously now you can extend with with theender add-on, extend what gets outputted by the GLTF. So, I mean, from my perspective as a game developer, I'm totally happy. Like, if plugins can be built to make it happen, then I think that's a great first step. Yeah. And that's exactly what we're going to be aiming for and just so Ant and Jin know Michael Jared is one of the people that is in a brand new discord server just founded like a week ago where we're trying to get a bunch of people together to implement a blunter to get a bunch of people together to implement a Blender to Github pipeline. And through my convincing of them, this will be using GLTF as the foundation. And since we already have things like GLTF physics in Github and also audio coming soon, then we can just implement these things as Blender exporters. And then you don't have to do anything on the Github side because it'll already import the OMI data. Yeah. And for just a little bit more context for everyone, I've been working on an independent plugin for almost a year now, actually. I sell it on the Blender marketplace. Shitloads of people buy it. To do that, right? To do this pipelining between Blender and Giddo. And my interest was piqued massively when I found Aaron through the other Discord and explained to me that basically, I'm going to paraphrase this, and if I'm butchering, just let me know if I butcher it. But basically, we're getting to a point where game entities, in terms of physics, maybe in terms of audio spatial type nodes, this other information is going to be packaged in a standard way in a GLTF file. And so whether I develop the plugin or, well, this plugin we're developing now is the end state, it's like having that standard, it's like, for me, that was just like, wow, okay, we're actually at that point. I didn't think we were at that point because the data on that I ship now uses a bunch of proprietary custom import instructions. There's no intermediate standard that's going to mediate that. That's kind of my background. I think it's super fascinating. I think it's actually really within arm's reach. There's a couple technical questions I have I probably won't bug the group with just yet in terms of implementation. We would love the group would love it if you bugged it about, about these things. Yeah. Try to poke holes in it for sure. I think I haven't been doing a lot of the coding is another guy who's doing most of the coding. It's not going to be an issue with the standard. I think the standard, the standard appears very reasonable to me. It seems to fit the philosophy of GLTF and the way you've kind of differentiated what nodes are from what resources are and how you index them. I guess one thing that I'm hung up on is you have, let's say, a concave collision that you want to generate in Blender, right? Aaron knows exactly what I'm going to say because I've been harping about it for like a week or a few days. But internally, Blender is going to have some representation of that object, which has a mesh. At export time, it's going to convert that, obviously, a gltf node that has position rotation scale and then you know it could have a material it could have a mesh um actually i might have misspoke there how does it work meshes get materials in gltf or does the node can a node have a material applied i can't remember but in any, that node is going to have a mesh. But the problem is, I don't know at which point in the hooks, the export hooks in Blender, that you could actually know what the indices are going to be. So it has nothing to do with the OMI standards. I don't know if you guys say that, like OMI standards, whatever. You can say it either way. You can say OMI, you can say OMI, whatever. Yeah. OMI, yeah. OMI, yeah. The standards are fine. It's just like one thing I do work. So I do work a lot with standards. I'm actually an electrical engineer by trade. Did a whole bunch of stuff with the IEEE many, many, many times. So I'm very familiar with standards. Standards can be perfectly well written, but until you get an implementation that bashes the crap out of it and tests it, do we know if it's bulletproof? I agree completely. This is actually something that we've been discussing in detail over the past month with Kronos' proposed interactivity extension because they have written a specification that is incomplete and has no examples and no implementations. Excellent. Love it. And part of what we do in OMI is we try to at least have some implementations before. We have a stage system. Stage 2 says that we have two implementations. We have a stage system where stage two says that we have two implementations we have test assets we have recommended you know things whatever whatever those those uh the bullet list i don't have it in my head but um so those are what we use to to kind of signify that something has progressed along and then stage like something can stop it like stage three stage four and still be a really good um i guess standard well not not completely ratified it's like a chrono standard but something that a lot of people have gathered around and then we use those you can use those as sort of indicators of how safe it is to build around those structures um so that's kind of how we do it here. And then we propose them to Kronos if it's relevant. Makes sense to me. And most of our stuff is not very far advanced in our staging process because we pretty much the only implementations have been written in Github by me. So we need more people to join in and participate in this. I don't want to go to Unity, go to Unreal, and write implementations there. I would like people using those engines to take it upon themselves to read through the standard and implement it themselves because that would be like evidence that the standard is easy for people to read yeah I've got to refresh some of my implementations now I think like portal and a few of them are still working but yeah since things have changed I've got a lot to update can I ask a general question? yeah Since things have changed, I've got a lot to update. Can I ask a general question? Yeah. So kind of what I'm seeing is, you know, there's the development of these GLTF extensions. Are we getting to a point where, you know, assets can be streamable, right? If you think about how GLTF is composed, most, I think, Godot wants you to use the GLTF plain JSON and then a binary file connected with it. If you think about it from an architecture standpoint, if you can bring in game entity properties, then you're nearly at a point where you could stream resources and obviously hot reload. Aaron probably knows a shit ton about that too, but I mean, how is that a goal of the group to have streamable resources? Like do we think that's, that's something that the spec helps with or am I just, am I just, I don't know, way off base here. I think, I think it's interesting to think about some of these data structures with that in mind, but I don't think it's something that we would design around. But it is interesting to think about runtime changing things. But I don't think that really changes much about these data structures. I guess And but I don't think that really changes much about these these. The data structures, right, like I mean, I guess. Because, like in the case of audio, like you can have a source that's like streaming data coming in, so there is a slight concept of it in that. Yeah, I think where I was kind of going with it in my head, it's like we're going ever going to be... I think about Google Docs, you know, what they were saying during the, oh my, the call that was just on Twitter or whatever. It's like, yeah, you can have a bunch of people in the same space collaborating. I don't think Blender software is going to get to a point where it's going to allow multiple remote users to be manipulating the same space inside Blender. Yeah. What may happen... That goes for runtime, though, right? Because, like, GLTF in itself is kind of like the exchange, like the static file that you're sharing, right? It's a transfer format. Yeah. But if several developers were working on Blender on their own machines, let's say, but having a quick export or a hot reload to a game engine like Godot, then those resources would effectively be more or less instantaneously reflected in a scene, right? In a scene tree. Yeah. So that's not just a tangential thought, that's all. Well, so it's actually, it's a good one. It's something that I'mential thought, that's all. Well, it's actually a good one. It's something that I'm working on right now. So I make a plugin for WordPress where people can build 3D worlds, and it uses the structure of data that WordPress uses for posts, which is called blocks. Blocks make up the world. And at the end of the day, you're building something very similar to the node structure of a GLTF file. So there's a new feature coming for collaborative editing where they want multiple people to be in the same post editor editing the same post. And that's pretty much the problem that I have to solve, but at the end of the day, I'm just syncing up JSON and then making the world at runtime true up whatever the changes are. And I'm using just like, you know, peer-to-peer messaging between people to keep the changes in sync. And yeah, that's the way I see that kind of problem going. That's very cool. Yeah. A lot of side DOMs and just JSON blobs that we're going to be managing on the side this kind of i think how that works and and it doesn't really even change too much about these these standards too because it's like okay you're just keeping in sync that data and the values or whatever yeah I think that would be that's definitely a similar situation to what I'm kind of thinking of of course I'm having tangential thoughts about virtual reality and one weird thing I've always thought about it's like we design, I don't know if we're all game developers in here, probably not. But people design game developers, especially indies kind of in isolation, mostly, unless you're actually collaborating on a discord call or something. It's like, we ever going to get design time tools where you can be in a 3d space, making the 3d space. It's a very pie in the sky. Is it the thing? What's that? It's, it's already a thing in, in several apps, actually. It's an underrated thing. I'll just say that not a super mainstream thing, but as Aaron said, yeah, there's, I just think real time collaboration is such a cool, powerful, and underrated future. But yeah, PlayCanvas, TheMirrorhead, real-time collab. There's Resonite, Janus, a bunch of web platforms. And what level would be... You could author assets in real time? I worked at the Mirror for two years. I only recently got laid off because the company ran out of money. But the platform still exists. It's just low staff right now. But the Mirror is really cool because you can just make any gltf assets you want in your editor of choice whether that be blender or gido or whatever you can export it to gltf and then that content will export with the omist standards if you're exporting from gido and you can import that into the mirror and it will load with all the information ready to go out of the box. So you just in the game you upload. You have it in your inventory or whatever. You can just pop it down in the world. And you can be on a multiplayer instance with other people too. And everybody else will see that asset very quickly after you place it down. Like less than a second. It's like real-time. So you can real-time build a space together with your friends. And there's no complex configuring necessary to do in the app. It's all done ahead of time. You can configure it further in the app though, like if you want to. And there's also like HyperFi has a concept of like multiplayer changing the world and saving it and all that and they've got the user system where certain users can have permissions to edit a world um that's another thing i think needs to be solved with this whole like multiplayer idea is permissions and kind of building... I mean, it's not... I don't know if it's standards around this sort of thing, because it's like, well, what is your... What is your, like, user system using currently? So you've got to kind of... I don't know. Yeah, some things are going to be just implementation. Yeah, it's like that gets too deep to where we're too opinionated on it. It's like, I don't think there needs to be a standard on this. Everyone's going to have to do it their own way. Well, that's fascinating. I did not know that was a thing. Yeah, I have a lot of thoughts on that but yeah that's that's pretty cool well Aaron what what uh things do you have what goodies do you have for us today yeah uh give me give me a sec actually I'm trying to uh pull up the mirror right now to show Michael Jared. And of course, I'm having trouble because the code base and the Godot engine underlying it are pretty crashy when you try to run a AAA sized game on top of it. you gotta go talk to the road to vo stock people and see how they're doing see how they manage the triple a size world in godot have you seen this has anybody seen their stuff we have a lot more challenges, though, because a lot of it is issues with importing stuff at runtime or issues in the rendering server. And it's hard to predict what kind of assets are coming into the game from users. So yeah, it's really tricky. So you're getting crashes just on asset import there usually crashes in the rendering server like after the asset's loaded so like it's not in the asset import code it's like anyway let me screen share just got this pulled up. Hopefully it doesn't crash. And it can take a bit to load up. I'm going to, while that's loading, I'll pull up this other project that I was going to show. How old are these projects? So this project I have on my screen right now, this one is, I made it in the past week. I started it less than a week ago. So this is GLTFx, which is a scene format that allows you to reference other GLTF files. So let me actually open this up in......ABS code as well. So we have this file, which is a GLTF-X, and it's very similar to a normal glTF where you have the nodes. But what it has is these fields here called asset. And this allows you to reference a sub-object in that glTFx that points to a glb or glTF file. So here's the list of assets. It has a name. It has a URI. It points to this file here, this GLB. Then inside of here, I can actually go and click on it. And I get this here. And I can import that and click Editable Children. And I see that it's got another scene inside of it. So it's actually preserving the scene hierarchy. And I have it supported for both import and export. So if you have a Godot scene in a hierarchy like this, you can actually export this as a glTFx. And here's an example of this one is a Godot scene. And I have inside of it a reference to another Godot scene. And inside of that, a reference to a Godot scene with a mesh. So it's like a bunch of nesting going on. And I can actually close that. And I have it right here exported as a GLTF-X. So this one is like this GLTFX references another GLTFX, which then references a GLTF, which then has a mesh inside of it. So you can do arbitrary levels of nesting with this system. And this is I just just in the past few days uh released this okay so this is on your fork this is on not on my fork we could do actually this is a an add-on you can just drop it into Godot. Oh. Yeah. Oh, because you're using the glTF document stuff, eh? Actually, it's not even using that. It's using a different system that allows you to provide a brand new format to Godot. So if I go to Scene, Export As, there's a new option added here by the plugin and there's also i specify in in this class that i have i want this class to handle a dot gltfx file and then it gives instructions on how to import it and it just says to call into this gltX reference class. And then this class here has actually all the code to do the importing and exporting. And this class could be called at runtime as well. So if you wanted to implement GLTFX in something like the mirror where you're importing an entire scene at runtime, you could do that from here. So just for argument's sake, prior to this asset branch of the GLTF file, there's no way to composite a GLTF file from another GLTF. There's no pre-existing function for that? There's no existing system. You just had to do that within the app, and you couldn't do that ahead of time. So if you wanted a single GLT, a single file, save the disk, and you wanted to have several instances of the same model or something, you would just have to duplicate them. Just duplicate the node tree. I mean, you could share the mesh data, but duplicating the node tree is kind of annoying. Right, right. Yeah, I mean... And I've also got the mirror pulled up here. So this is actually a real-time platform that I was working at the company building for two years. And so all of these objects on the left here are GLTF files. And if you wanted to upload your own you could just browse for a file on your computer and then once you have that you can just drag it in and drag it around and whatever you can come compose it inside the app and it will import whatever data is there including like omi physics but you can also like specify your own physics if you want it to be dynamic or something, you can just turn on the dynamic physics, and it'll start moving around. Does it have to make assumptions about physics layers? There are no physics layers, as far as I know. It's just everything's in the same layer right now. But if there were physics layers in the file, we could just import those. And it's actually... Physics layers is something that I'd like to discuss today. Right. Yeah, I was just going to say on your GLTFx stuff, I have half a dozen or more users of my add-on that are asking for that exact function, so people would use it. If it exists, people would use it if if it if it exists people would use it um and the reason people want to use it is they want to they want to unburden themselves right like through a lot of 3d artists like making an asset in a closed like new blender blank blender file the origin's at zero i'm going to make this 3d asset right it's going to hard surface model or something i would like to be able to open up another scene and then reference that and place it. Yeah, so you could totally do that inside of Github with my add-on installed. And the way that it works is you just compose your scenes as you would in Github. And then you could do scene export as GLTFX reference format. And then you click on this, you get this menu here. And this- So your Godot add-on is adding all of this functionality, the new context menu item, the new panel on the export. Yeah, it's very, very, very easy to plug stuff into Godot. It's extremely flexible. It's like, it's also very well documented. So it's much easier to make this to get out. It's extremely flexible. It's also very well documented. It's much easier to make this than anything else that I would make in Blender. I would have to spend a month trying to do this in Blender to figure out its API. Also, part of this is I helped make this API, so I already know it a bit. Even if I didn't know it, it would still be really easy. In this dialogue here um this this panel on the right is actually not possible in githo 4.3 um because like there's an api that is not uh exposed so like as i was making this i made a PR to expose the API. So if you download this today without that PR installed, it will not show this panel on the right for the settings. If you want to specify if it's a GLB or GLTF. This is running in your fork then. Yes. But the only thing the fork does is... Yeah. Yeah. Makes sense. Class DB, yeah. Yeah. Makes sense. Class DB. Yep. Yep. And then even without this panel, you can still use it. You'll only export with the default settings. And you can save this wherever you want. Just make a folder there and save that in there. And then, oh, I just remembered a small bug I need to fix. It doesn't actually refresh the file system. I need to click out and then click back into Github and then it recognizes it. Then I have here, here's the GLTF-X node 3D. I can click on it and we have everything from there. I can drag this in and we have that Node 3D with everything underneath it. I can drill down into these folders. I can see that everything goes down to the GLB eventually. That's a good feature. I think I've been in so many of these conversations where people get hung up on the philosophy of, oh, should I be compositing in Godot or should I be compositing in Blender? I like the work that this group is doing because it's like you're giving the options. You're providing options. And for an open standard, that totally makes sense. You're not going to wrangle people to do the same thing. The ideal case here as well is that you shouldn't have to worry about the tool that you're using to do it with. You should just do what you're comfortable with. I'm comfortable with Github, but a lot of people aren't. But then the end result here, these files are very, very simple general engine agnostic files. So any tool could be built to generate these. Hey, guys. generate these. Hey guys, just to confirm, is GLTFX supported by Blender right now, or is that something that's... Not supported by Blender right now. In fact, it's not even ratified by the Kronos group yet. Right, right, okay. So the Kronos group is working on it. Here's the repo for it. And it's just a format for composing the GLTF assets. It's not final yet. So I included the note here. It says that the format is a work in progress. It's not yet ratified until it's finalized. This add-on can be considered experimental and subject to change at any time to comply with the latest iteration of the draft spec. So forgive me. mental and subject to change at any time to comply with the latest iteration of the draft spec. So, forgive me, in simple terms, this is like Godot scenes, but in a potentially very migratable open format standard. Yes, but there is a key difference here. So we have like It's like a linked collection, no? For Glendor. I would imagine a Blender explorer could use collections for this. But anyway, it's a we have in Godot, you just have scenes all the way down. So everything's a scene right yeah in Unity you have mostly prefabs but then you have to have a scene as the top level So glTFx are the branches and glTF are the leaves. Exactly. So instead of having in Unity where the root is a special thing in GLTF the leaves are a special thing you know that's a very beautiful way to put it thank you yeah so this way the reason the Chronos group chose to do it this way is because as long as you see a GLTF, you know that's referencing, that's just a single model, a single scene. And it maybe had some external resources, but it's just one thing. It's not going to branch off to infinity to grab more things. But then a GLTF-X, you know that that's going to contain other things for sure. And so if you load that, you know that you're going to need other files along with it. Yeah. So the GLTF file is going to basically say, hey, I don't need to recurse any deeper. This is going to be either GLD with everything or GLTF plus bin file. Yep, exactly. Is that right? Yeah. Yeah. And also worth mentioning, GLTF explicitly forbids things like meshes, materials, images, buffers, accessors. Any kind of the meaty data is left delegated to the leaf glTF files. So it can just have nodes basically. Yeah, glTFx can only have nodes and references to other assets. And those nodes can have position, rotation and scale or a transformation matrix, but that's it. Yeah. There's great applications with that that I can think of right off the top of my head. One thing that Blender users are finally coming around to is using the asset drawer in Blender. People are seeing ways to do that. So I think you could build an add-on pretty easily to convert a linked collection to a GLTF. And then, of course, your main thing is going to export a glTFx that's going to reference that one I think a lot of applications of this yeah so anyway that's the glTFx stuff, and I'm glad that I got to show that off, but we also have other things to discuss today in the OMI meeting. There's also the GLTF extensions repo pull request that I made that we need to discuss. There's three PRs here and we actually already took a look at these last week but then we said that Lyuma wasn't there last week and we didn't have a lot of people so we would discuss it again this week or bring it up again or something and since Michael Jarrett hasn't seen these before I'll just go over them really quickly so with this pr uh basically there's a competing uh a spec from owen from microsoft and he's calling it uh khr uh preemptively presum presumptively, something like that. And it has more features than this repo, but I'm very critical of some of the things in it that I don't think they're doing properly or ideally. So what I'm trying to do here is I'm trying to converge the specs together to make the OMI physics spec have all those missing features and bring it closer to the Microsoft one. And then we can compare these and converge them into some final spec one day. So the OMI one currently has motion and colliders and triggers. And this PR adds physics materials and filtering. Filtering was like layers and stuff. And physics materials is like the friction and the bounciness of a surface. So I can click on here and then look at some of the details here. at some of the details here. So it adds this entire section for physics materials and filtering and all these things. And this wording is very similar to the physics materials and filtering. The physics materials are very similar to what's found in Unity or Unreal, where there's the types of friction and the restitution and how they combine. And a lot of this is just directly copied from the Microsoft spec, because again, we're trying to converge them. So I looked over every word, but the starting point is just copying from them. And then we can compare any differences later. And this is actually, by the way, different from the physics materials in Godot Engine. But that's just a problem of Godot Engine because it's not doing things ideally. Then there's also the filtering. And the filtering is, first of all, it's done per shape, not per body. Giddo does it per body, which is arguably worse, because the per shape is a lot more flexible. And per shape is how a lot of engines do it. So that's what Microsoft Spec is doing. And that's what I'm proposing that we do here just to do the same thing. And the way that the filtering actually works is by using these lists of collision systems. And these are like named physics layers. And these will be expected to be imported into a game engine using a layer system. So you'd have to figure out what name you want to use for a physics layer. And then it also provides either a list of things that you want it to collide with or things that you don't want it to collide with. So these are mutually exclusive, so you either use one or the other. If you just use like collide with systems, it will collide with everything listed here and not collide with anything not listed. And if you use this one, it will avoid colliding with any of these, but anything not listed in that list, it will collide with. Sorry, can you just go back for a second? You said the Godot implementation is only looking at that collision filter on the level of a body? Yes, so like a rigid body 3D node or a kinematic or character body 3D node. I need to learn more about the physics side of the engine, but how is it doing that if learn more about the physics side of the engine but how is it doing that if a body has multiple shapes associated with it yeah i just just did the same thing on my end um so um the the the spec would say that like node here, the shape, would have on the inspector layers, and it would be strings in the glTF. And then in Godot, you have here on the body, it's doing layers. layers on the body level. Yeah, so what we could do here for our Godot implementation is long-term, we could see if we can add the per-shape filtering. That would be like the ideal case. Short-term, what we could do is take everything that exists on the body and apply it to every single shape child. And then when we're importing, we can just look at one of the shape childs and apply it to the body. And that's not going to work correctly if the shapes have different filtering settings. But to be honest, I expect that most assets will have all the shapes on a body with the same filtering. It's just like the edge cases where we don't have the freedom to make it different shapes have different filtering settings what's the i'm trying to imagine a use case where you have a single rigid body that would have basically what you're saying is that there could be parts of it parts of those collision shapes that are acting on different layers let's say in Unity or Unreal. What's an actual use case of that? Because I can't think of one right now. Why would a single rigid body need to have shapes that are on different layers? So for example, imagine a spaceship, maybe like a Borg cube or something. And from the outside, you only care about the cube collisions. You might have a box collider on it. And from the outside, that's the only layer that you care about colliding with things. I see. Yep, I got it. I got it already. Yeah, for anything inside, you want it to ignore that. And you want it to consider instead like the details of the interior so how do we do okay don't want to tangent here but um so in godot right now you just want to be able to do that great they would create different to get around this limitation in godot today people are probably creating multiple rigid bodies that are somehow that's true that's another option you could create multiple rigid bodies that are somehow... That's true. That's another option. You could create multiple rigid bodies in Godot. The challenge, though, is that... They're moving separately, right? You can joint them together. You could joint them together, but the challenge there is that the joints are going to be very janky. That's a bad solution. Okay, I got you. I'm on track. So, yeah. We want to build the standard to be flexible, but it's okay if it can't be perfectly mapped to every game engine, because you're never going to get it to agree. If we propose that it's per body, then the Unity folks would just say, well, why don't you do per shape? We can do per shape. That's better for us. And why do we have to break our assets when we're exporting them? I think the standard needs to focus on what is the best and most correct way to do any game entity function that's going to get dragged around with this GLTF data. Isn't the other alternative what is most popular, what is already the common? The per shape is the most popular, most common. But yeah, Michael, Jared, this is the kind of discussion that we've been having for two years or something, trying to figure out what is the common ground that is common to all these engines that we can all agree on. And I know that if you're just trying to build a Blender to Godot pipeline, every part where that differs from Blender and differs from Godot is annoying. But this doesn't prevent you from doing... If you just make sure that you only export the shapes in a body that agree with each other in terms of the filtering, then you're not going to have a problem importing that into Godot. It's only if you make it disagree. So you're not actually being limited. I think, yeah, exactly. I don't care. If a specific engine has more specific tooling that tailors the need, I think that makes sense. One slight question. It's a philosophical question, and I apologize in advance. Is there not a bit of a slippery slope phenomenon where we just keep bringing in more and more and more features into the GLTF extensions? Isn't it? Yeah. Compared to what? Like, what is the slippery slope compared to what like where does the slippery stuff compare it to because i'll give you an example like right now my very proprietary add-on which only works for godot does not rely on a standard has many obvious problems let me put it this way it works very well 80 plus percent of the time and for users that want to do things quickly that's good so one of the features it implements uh is that literally there's a way to have a line separated text file that you can associate with the gltf node and on that line separated text file you can specify any godot properties, you know, and basically tag it with that note. For instance, a collision layer, a collision mask. Those are two properties of physics body. And so users can specify and attach in Blender to their objects at design time what Godot properties all these things are going to have. And the way that's implemented, it's janky, but it works, is the GDScript parsing mechanism to set the object's properties. I'm not saying that's the right thing to do. I'm not saying that's, you know. Yeah, and that makes perfect sense as like the easiest solution when you're trying to implement a Blender to Godot pipeline. The two problems with that, the obvious one is that only it works for Godot, but the non-obvious one is that it's not cross-project compatible. So if you make an asset that says, I want to be on collision layer 3, and then you try to bring that into another Godot project, well, maybe that other Godot project uses collision layer 3 for something else. You're losing me there a little bit, because, I mean, a property like Collision Layer, that's existed back, you know, as far as I can remember with Godot. So it's not a matter of engine version. No, it'll still exist, it'll be importable, but it just might behave differently. Like, maybe game A puts the player on collision layer 2, and game B puts the player on collision layer 3. Yeah, there's a deeper problem here with interoperability that I'm just thinking about in terms of metaverse. That's the big challenge. That's a big question, yeah. I'll just let that... I'll leave that question alone for now sorry aaron continue no i'm i'm just uh making sure i i reply to to what you're saying because like yeah i completely agree understand and agree with like everything you're saying here it's just that like i wanted to make sure that you know that these are all questions that we've thought about before and that we're actively working on all the time. proprietary platform and then getting at least one other platform or system to use that same type of thing. It's something that we're trying to go for. It's like in the group's name. Yeah. Yeah. No, it makes sense. The layers make sense. Don't get me wrong. Collision layers absolutely Yeah, no, it makes sense. The layers make sense. Don't get me wrong. Collision layers absolutely make sense to bring it to the standard. But on the topic you brought up earlier of the slippery slope of including more and more things, the one thing that I have not included yet in this PR, and it's not in the existing spec either, but is in the Microsoft spec, is joints. And joints would be for joining together two different physics bodies. And that could be on a hinge and stuff. And I am concerned that there's a slippery slope here. I have already started with the joints, bringing in the joints, but I still don't like it. So if I take a look at this branch that I have here, we have a lot of things related to joints there's like linear constraints angular constraints stiffness dampening position target they have to be uh there's a minimax and stiffness and dampening uh on on the limits as well they have to be referenced in the top level document. They have to be used on nodes. And also, Owen's proposing that we don't just have joints, but also have joint drives. So you could have a joint that's trying to continuously spin, for example, or a joint that is trying to move an object to a specific target, like a motor. I think a motor, we were thinking about motors because in the Avatar use case is that you've turned your character into a, what's it called, a ragdoll. But you also want it to move things, like when it's dropped on the ground. And so I can see that being useful it's more complicated though well these are meant for like physics joints you know for like mechanism not a skeleton or a ragdoll well once you ragdoll it becomes a physics object because it's not controlled by a character controller okay well anyway on the topic of like the scope and the slippery slope and stuff controlled by a character controller. Okay. Well, anyway, on the topic of the scope and the slippery slope and stuff, I kind of am against having this in the main spec because it's just so much. Adding joints to the base physics spec increases the size of the base physics spec by an additional 40%. It's quite big.'s like it's like 140 percent the the size or something um so i i think that it should just be a separate spec but then i raised this point with owen from microsoft and he doesn't understand by objection and he thinks that he tells me what physics simulation doesn't have joints and then I say a lot of them and he says well if we want to have joints in many of them and we agree on what joints are then shouldn't we put it in the base spec and I don't have a response for that because I don't know how to respond to that I guess it's a deeper I don't know how to respond to that. I guess it's a deeper question about, like, is it intended that this wide-scale interoperability also includes... I mean, you're getting into deeper levels of simulation, right? Like, in the fields that i work in you know when we simulate something we come up with a process model before we even try to build anything this is a complete model that explains behavior of the system and it's like i couldn't write a spec that tells me what the model is going to be. Just because joints behave some way in some specific physics simulation doesn't mean that that's how all joints behave. Right. And if, say, an engine doesn't have joints working the same way, it would be nice that they could mix and match the base physics spec with a different joint system, versus if it's all-in-one, then they have to support everything. Or you're not allowed to have box colliders unless you support joints as well. So it's a question of scoping, but this is not a hill I will die on, and it's a question of scoping but like it's this is not a hill i will die on and it's a hill that for the past two years owen and chronos have told me that they're going to put joints in the main physics spec and that's final The hope is that despite the problems of scope, in theory this means that they will attempt to get the Chronos members existing engines like the Microsoft physics engine and they will try to get like unity and unreal engine and like a like a web uh physics renderer uh with these specs so that that is i would consider that like a like a win yeah i mean whether the model is universal enough to apply to all scenarios that's probably yet to be seen but i guess if you standardize the way that joints work well not how they work we're not talking about the implementation we're just talking about the way that the data yeah the data representation but it's like also accompanied by like a large you know markdown document with detailing what the behavior is supposed to be so that engines will know how to implement it and what like what's supposed to happen with these joints and such I don't know what their pushback is on all physics simulations use joints. That's basically only in the world of 3d graphics, like physics simulations that use finite element analysis are not using. It's always about a degree. What, what level of fidelity do you want? Right. You're not doing a simulation for, you know, trying to some of the also note some of the chronos perspectives are like uh some of the chronos members are like pixar and the pixar people say like oh well in our animation software we've always had this for decades of why why shouldn't we have it in the spec we were talking about a feature that seems a lot like what could be implemented by a finite element analysis which is that every frame it is like represented by a VLTF blend shape and we would expect that every frame, we would have to convert it to like a collision and then simulate it per frame, which is very stressful and difficult for games. But it is something you could do with a finite element simulation. Like you literally check the heavy frame and move and migrate the the math through the elements. This is without like, adding any additional, like, types of. Mashes to the. Yeah, but presumably there's some sort of personal logic that needs like, uh, you know, a, um. what's the term I'm looking for proper typology in the mesh to understand where the enclosed volume is and then breaking it up into pieces and then iterating on all those pieces doing something like that yeah but it's kind of not specified how you solve this is what is there to be solved here's the data that is available and then go have fun and solve it. So Aaron, what kind of changes? Sorry, I know you went through them pretty quick. What kind of changes to the existing spec? What would it look like? Yeah, so for joints or physics materials or filtering or what? I mean, I thought you were talking about you know introducing joints between physics bodies um so i guess i was curious about physics bodies primarily and you said there was a higher level change the root node had to include some information for it? Yeah, so here's... So I started actually working on all three and then I ended up splitting materials and filtering to be done first because I was more confident in those. But here's the diff with just the joints added. So as you can see here that there's... On the top level the document schema will reference a list of joints. The node is able to reference a joint, just like it can already reference a motion, a collider, or a trigger. And then four new schemas are added to define joints, define joint limits, define joint drives like motors, and define how a node uses those joints with a connected object. So that's four new schemas and two altered to add joints. I mean, it's not too big, I guess, new schemas and two altered to add joints. It's I mean, it's not too big, I guess, but another thing worth considering is that it kind of massively increases the API surface of the animation pointer. I forget where I have this, but there's like, I thought I already wrote it somewhere, but there's a list of, actually, it's written on Owen's repos. Let me just go there. Sorry, a lot of branches can be hard to navigate because they work on this stuff. And then we only discuss it once a week at the OMI meeting. So stuff only gets proceeded through at a finite rate. You know? You're losing me a little bit in terms of this API surface increase you're talking about. Sorry, sorry. Here's what I was talking about. So one of the features of GLTF that is introduced fairly recently is called the GLTF object model, which allows you to reference properties of a GLTF and do things like animate them or script them. So you can, for example, import an animation that changes the stiffness of a joint over time or that changes the mass of a body over time. I see what you're saying. Animatable properties. Okay, I got you yeah yeah yeah yeah and um if you take a look here uh this is the the entire list of uh properties that's allowed by the owens physics extension and uh this is all of them it just barely fits in the screen and these are all the ones for joints so adding joints kind of doubles this API surface I think probably the biggest problem you're left with is like I see exactly what you're saying you're increasing the spec size you increase this this other animatable properties you know I haven't looked into the glTF objects back yet, but it's like, if you don't have it in the standard, if you don't have this, then what's the alternative? You end up with rinky-dink. The alternative is that we build another standard that builds on top of this standard. How? Okay, I'm going to not ask too many questions here because we're gonna be here all day the answer how is that like you just like GLTF is a standard and this is a GLTF extension that extends that standard you can make another extension that extends GLTF it depends on the rigid body spec or you can have an extension that extends the extension. So there's actually multiple ways to do it. So these are always things that are extendable. But anyway, even though I just spent a long time pitching to you that joints are something that Kronos wants to that I believe joints should be separate Kronos wants joints to be on the same spec so that's probably what we're going to go with I mean I think you're fighting too much momentum there. Yeah. So I'm not fighting this anymore. I want to move things forward. I don't want to drag my feet, you know? So that's why I have this PR that gets us part of the way there to adding physics materials and filtering. And we can look at the diff here. Some of these are just like minor formatting changes that there's. There's actually a cool story we can talk about the compound colliders, if you've got a moment. Sure, go ahead and talk. There's actually a close story that we as Kronos and OMI group, we actually got together and discussed one part of the physics standard, which is, I think it's called, what was the term they called it? Compound colliders? Well, it's only for triggers compound triggers yeah compound triggers and we actually weren't entirely happy with the way that it was but we got together and we got both sides to agree that these should be added to the spec. Can you explain this difference more precisely? I'm having trouble. So this was a meeting that happened, I think, back in February. So a few months back. And one of the big differences between the OMI physics spec and the Kronos-Owens Microsoft physics differences between the OMI physics spec and the Kronos OWN Microsoft physics spec is that OMI allowed for compound triggers. So you can have multiple box gliders in one trigger, and that would allow you to make, for example, an L-shaped trigger volume. But the Microsoft spec only allowed one shape per trigger. So you could not make an L shape. You just have to have a box as just a single trigger. And the solution that Owen and Microsoft was saying is that you should have you should just in some other layer on top of that combine those inputs together. But then we discussed that all the complications that arise with that and that this would be really tricky to implement because Githo's area nodes support multiple shapes coming together into one area. And we ended up bringing in another guy from Kronos, the guy working on the scripting system at Kronos. And we discussed this for like an hour. And then he ended up agreeing that we should have compound triggers in the spec. So then we ended up coming up with a new solution called this nodes property. It was different from what Omi was doing before. Because before it was just like Omi was declaring like an empty nodes property. It was different from what OMI was doing before, because before it was just like OMI was declaring like an empty trigger property. And it just like, okay, here's a trigger with no shapes. Its only purpose is to combine shapes underneath it. But then Owen and Kronos didn't like that. So we ended up coming up with a new solution where the parent explicitly references the child nodes that it is compounding. A cool imaginary use case we were talking about for this was that we had a compound trigger which stayed the same, but the idea is that every iteration, the complete world would be completely different where all the nodes and contents would be different. And you could use this as a grouping for an entire level. And that was, I think, the use case that brought the spec writer from the scripting over. Yeah, no, I understand that completely. I know how I would implement this. Sounds like you can either provide it. I might have this wrong. But it sounds like you can either provide it the indices of the shapes. Sorry, I forget how it works in OMI. Is it GLT, OMI physics shape? Is that what that index is that goes in nodes? It's actually an index of child nodes. Okay, it's an index of child nodes. So yeah, and I mean, even when you're authoring this type of app. You need to use child nodes for the shapes if you want the shapes to have a transform because the transform is defined on the level of the GLTF node so that's why we're doing it that way 100% makes sense because when you're going to author this you're going to use some tool to create all these shapes and they're going to have a position in space so once the shape is set and they are going to have a position in space. So once the shape is set, and once that node carries around that position information, yeah. So it makes perfect sense. It's very cool. Yeah, and this is in contrast to Unity, which has offset as one of the properties of a shape. And I find that really weird because it's duplicating the fact that the game object already has a shape. And I find that really weird because it's duplicating the fact that the game object already has a transform. Yeah, it should just inherit. And that system sucks too because you can't. Like I think about in Godot, I always mess this up. What is it called? Collision shape 3D? The node that contains the shape resource? That's the move around with the parent body, right? Yeah. Which is intuitive. It's very intuitive. Yeah. The way that Godot does physics is, I think, pretty simple and straightforward, but other people might disagree and say that their system is more simple and straightforward. So in Godot, every physics object has a body, and bodies are the main thing that do their interaction in the world, and they move all their children with them. But then in Unity, you have a shape can by itself be used just in the world. And you can move it around through whatever mechanism you want. And it'll still allow objects to collide with it. And you don't have to have a body as an ancestor node. This is in big contrast to Godot, where you have to put a static body if he wants to have a non-moving collider. One of the big remaining differences between the OMI spec and the Kurodo spec is that in OMI, we have motion. And motion can be set to either static, kinematic, or dynamic. And so you do type dynamic or type kinematic, for example, to specify it's dynamic or kinematic. But then in the Microsoft spec, what you have is a Boolean flag called isKinematic, and you set that to true or false. So if it's a dynamic body, you have to do isKin false, and if it's kinematic, it's kinematic true. And you cannot represent static bodies with that. You can just do a kinematic body and not move it if you want a static body. So, sorry, I was distracting. What's the gap is in the static bodies being movable well basically the gap is that there's a distinction between static and kinematic bodies and it's clear from a static body that it's not expected to move right but then in the Microsoft physics spec you can't define a static body that's not expected to move, right? But then in the Microsoft physics spec, you can't define a static body. I mean, that's debatable, right? Like in Godot, don't they say in the documentation that you can animate a static body? It just doesn't have physics properties like gravity applied to it. You can animate it, but it's not going to teleport every frame. It's not going to push objects in front of it to somewhere else, because it's not intended to be moving. There is also AnimatableBody, which syncs to the animation system, but it's still doing teleporting every frame. Now that it's silent, I can hear the birds chirping. And it's because I still got the mirror opened in the background. There's like ambient sound. It's not just in your head. Yeah. Ambient birds. It's funny. Random question. Completely unrelated. Are they using like geometry clip map for the terrain? What are they doing here? This is height map terrain. So it's generated from an image. You said this is not Godot, right? This is something else. This is Godot. I've been asking this question and I can't get people to answer it for me. How do you load a texture into the vertex shader in Godot? Is that a thing you can do in GDScript? I have no clue, but all of this is done in GDScript, I think. It's just this project has a million lines of GDScript code. What do you mean by load a vertex from GDScript? Isn't it shader? Isn't this stuff all shader? Yeah, yeah, yeah. But in the vertex shader, in modern OpenGL or DirectX 10, I think they introduced it, you bring in a texture representing the height of the terrain into the vertex shader. And then it dynamically draws that. I'm not sure that's a thing. You have to go through every single image and then apply the effective free to, let's say, a square. Like a quad. And then you have to deal with making the edges so when you cut them apart, they have skirts so they don't see the distance. There's an NVIDIA... You guys have seen the Graphics Gems articles from NVIDIA? Yes? No? There's one on my clipmap terrains. The most popular one people reference is the one from Battlefield 3 for clipmaps. I'll share this one too. I'm trying to implement this in GDScript. Anyways, unrelated. But I do have to run. But this has been very cool. I love the work that this group is doing and i'm very excited to see uh kind of portability we can get in assets so it was nice nice meeting everyone that hadn't met before so i'll see you later All right, so does anybody want to review the PRs that I opened? Or If people want to stay, please to review the PRs that I opened? If people want to stay, please speak up. We are over meeting time, actually. Yeah, I have to be somewhere in five minutes. Alright, well, at least we had a good conversation with Michael Jared. Yeah, it was cool. Good stuff."}