{"speakers": [], "chunks": [{"timestamp": [0.0, 9.42], "text": " KHR audio and just some thoughts around runtime implementation and how we should be thinking about"}, {"timestamp": [9.42, 15.02], "text": " loading all of the assets before playing audio and sort of like that life cycle."}, {"timestamp": [15.86, 22.5], "text": " The thing that I was talking about prior to recording was there's an NPM package that OMI manages,"}, {"timestamp": [22.76, 25.6], "text": " and I have rights to it, Robert has rights to it, I can"}, {"timestamp": [25.6, 30.68], "text": " give anyone else in the group that wants, you know, I'm sure there's some vetting process"}, {"timestamp": [30.68, 35.26], "text": " we might have to talk through, but whatever. But I was updating it and then I was like,"}, {"timestamp": [35.34, 38.56], "text": " wait a minute, should I make this decision for somebody? I mean, if they're using this"}, {"timestamp": [38.56, 46.1], "text": " package, they're wanting to use our easy button that just adds a parser to the gltf loader and then adds it to the"}, {"timestamp": [46.1, 53.5], "text": " scene um in a generic way but now i'm like well i kind of feel like this is too opinionated to be"}, {"timestamp": [53.5, 60.0], "text": " like load them all then play because it's assuming a lot of the of the app and how they're doing"}, {"timestamp": [60.0, 66.02], "text": " things like maybe they are downloading everything before they render um yeah i don't know i'm just"}, {"timestamp": [66.02, 72.08], "text": " kind of like thinking out loud there but it's yeah and uh and i'll restate what i stated"}, {"timestamp": [72.08, 76.82], "text": " before the recording started so it's in the recording the way that it works in ghetto engine"}, {"timestamp": [76.82, 85.38], "text": " is that all of the assets required for a scene is loaded at import time so So during the import, it gathers all the audio files"}, {"timestamp": [85.38, 86.9], "text": " that are needed."}, {"timestamp": [87.78, 90.56], "text": " And then only once everything is gathered"}, {"timestamp": [90.56, 93.08], "text": " and the import is complete is the same instance."}, {"timestamp": [93.28, 96.02], "text": " And then everything is instance all at once"}, {"timestamp": [96.02, 98.04], "text": " and it plays the audio at the same frame."}, {"timestamp": [99.56, 100.16], "text": " Interesting."}, {"timestamp": [102.36, 109.88], "text": " Because the audio stream player in Godlay like the autoplay autoplays when"}, {"timestamp": [109.88, 115.84], "text": " the node is added to the tree oh interesting when it's added to the tree"}, {"timestamp": [115.84, 122.6], "text": " at the time of that huh yeah or it might be it might be when it's ready or or something so like"}, {"timestamp": [122.6, 125.04], "text": " it might be a frame after it's added to the tree you"}, {"timestamp": [125.04, 129.52], "text": " know yeah and see and that's the thing where i was like i the logic that i worked out was get"}, {"timestamp": [129.52, 134.7], "text": " get all of the audio files together and then at the moment that everything is ready to go"}, {"timestamp": [134.7, 139.2], "text": " play at the same time and it keeps it keeps the tracks together and if you put them on loop they"}, {"timestamp": [139.2, 146.06], "text": " they stay together and play forever uh and it makes really cool spatial songs, like performances and things"}, {"timestamp": [146.06, 146.72], "text": " like that."}, {"timestamp": [148.36, 148.88], "text": " Yeah."}, {"timestamp": [149.54, 151.8], "text": " I don't know. It's been a fun experiment."}, {"timestamp": [152.34, 153.92], "text": " But nothing really fruitful"}, {"timestamp": [153.92, 155.0], "text": " for us to"}, {"timestamp": [155.0, 158.12], "text": " ship, but I'm"}, {"timestamp": [158.12, 159.72], "text": " thinking about it. Now that I know,"}, {"timestamp": [159.96, 161.94], "text": " I think that's the expected behavior, is"}, {"timestamp": [161.94, 163.36], "text": " wait for everything to come"}, {"timestamp": [163.36, 167.54], "text": " into the browser and then do things with it."}, {"timestamp": [170.44, 170.88], "text": " Cool."}, {"timestamp": [173.94, 176.12], "text": " Oh, another audio thing I was thinking through."}, {"timestamp": [176.42, 177.98], "text": " I think we lost fire, so I'll wait."}, {"timestamp": [178.94, 181.54], "text": " Well, we'll talk about it anyway."}, {"timestamp": [182.1, 186.58], "text": " I've been building, just like in my free time as kind of a hobby, a speaker cabinet."}, {"timestamp": [186.58, 196.7], "text": " And I've been doing a ton of research into it and, like, what plays into sound and what matters when you build these things."}, {"timestamp": [196.96, 202.92], "text": " And one of the things that I found really interesting is if you have a fully closed back to your speaker cabinet,"}, {"timestamp": [202.92, 203.4], "text": " if you have a fully closed back to your speaker cabinet,"}, {"timestamp": [206.62, 207.06], "text": " all of the screws that tighten it in there,"}, {"timestamp": [210.34, 210.88], "text": " just tightening those changes the tone of the sound."}, {"timestamp": [212.62, 216.02], "text": " And I was just like, wow, that's really interesting to think about audio in 3D worlds."}, {"timestamp": [216.02, 219.36], "text": " And what does it mean that audio exists in a space?"}, {"timestamp": [219.44, 221.56], "text": " And I think the answer is something like"}, {"timestamp": [221.56, 224.98], "text": " we were talking about reverb effects in extensions."}, {"timestamp": [225.94, 231.5], "text": " And yeah, I just thought that was kind of an interesting, I guess, real-life realization"}, {"timestamp": [231.5, 236.9], "text": " that audio changes when things like just tightening a screw on a container."}, {"timestamp": [239.48, 242.68], "text": " And so it's like physics audio."}, {"timestamp": [243.2, 246.06], "text": " And I was just trying to think, like, what does that mean for the web"}, {"timestamp": [246.06, 247.52], "text": " and how could we do something like that?"}, {"timestamp": [247.54, 249.94], "text": " I don't think there really is because you'd have to make, like,"}, {"timestamp": [250.44, 253.1], "text": " living patches of synthesizers and things."}, {"timestamp": [253.1, 256.18], "text": " But, yeah, fun thought."}, {"timestamp": [260.98, 275.7], "text": " It's so beautiful. Can you hear me?"}, {"timestamp": [275.86, 275.98], "text": " Hello?"}, {"timestamp": [276.48, 277.0], "text": " Yeah, what up?"}, {"timestamp": [277.58, 277.84], "text": " Yeah."}, {"timestamp": [279.1, 279.42], "text": " Hey."}, {"timestamp": [279.42, 287.88], "text": " I don't know, not really GLTF extension related, but I accidentally kind of, well, kind of already knew,"}, {"timestamp": [287.88, 296.28], "text": " but was kind of surprised as well that a tool originally made for optimizing VRMs"}, {"timestamp": [296.28, 298.78], "text": " is also really good at just GLTFs as well."}, {"timestamp": [299.84, 305.9], "text": " Is there any normal map generator you all know about,"}, {"timestamp": [305.9, 309.46], "text": " or process for such?"}, {"timestamp": [309.46, 311.54], "text": " I'm just kind of thinking."}, {"timestamp": [311.54, 313.0], "text": " What do you mean normal map?"}, {"timestamp": [313.0, 319.04], "text": " You mean UV map or normal vectors on vertices?"}, {"timestamp": [319.04, 321.98], "text": " I will link something in the extensions."}, {"timestamp": [321.98, 323.54], "text": " I think you're talking UV."}, {"timestamp": [323.54, 326.42], "text": " You're saying combine everything into one single UV"}, {"timestamp": [326.42, 328.5], "text": " and make that one image, like atlasing almost?"}, {"timestamp": [328.5, 331.94], "text": " Like take a base color, or albedo,"}, {"timestamp": [331.94, 334.22], "text": " or whatever you want to call it, texture,"}, {"timestamp": [334.22, 335.48], "text": " and generate a normal map."}, {"timestamp": [339.38, 344.06], "text": " You first have to make it into an atlas, and then."}, {"timestamp": [344.06, 345.76], "text": " That's what the tool does already."}, {"timestamp": [349.04, 350.64], "text": " Okay. Which one is it?"}, {"timestamp": [350.66, 351.98], "text": " I think I'm understanding then."}, {"timestamp": [352.32, 352.98], "text": " Which one is it?"}, {"timestamp": [353.86, 355.26], "text": " The tool? Character Studio."}, {"timestamp": [356.96, 357.48], "text": " Cool."}, {"timestamp": [357.6, 360.66], "text": " Now we're implementing drag-and-drop GLTF support."}, {"timestamp": [362.16, 364.32], "text": " And it's going to be a lot of work"}, {"timestamp": [364.32, 366.1], "text": " to implement glTF transform"}, {"timestamp": [366.1, 366.86], "text": " unless"}, {"timestamp": [366.86, 369.8], "text": " we figure out some other way to"}, {"timestamp": [369.8, 370.86], "text": " daisy chain it."}, {"timestamp": [371.56, 373.88], "text": " It is a"}, {"timestamp": [373.88, 376.08], "text": " certain number of days until that will be"}, {"timestamp": [376.08, 378.14], "text": " solved. I don't know if that influences"}, {"timestamp": [378.14, 380.14], "text": " anything, but I'm definitely going"}, {"timestamp": [380.14, 382.14], "text": " to do it if somebody else doesn't do"}, {"timestamp": [382.14, 382.74], "text": " it before me."}, {"timestamp": [384.32, 391.38], "text": " I'd rather find ways to not write anything redundant"}, {"timestamp": [391.38, 395.56], "text": " and just find ways to compose with other people's efforts."}, {"timestamp": [395.56, 399.46], "text": " But there's a gap in the workflow"}, {"timestamp": [399.46, 405.1], "text": " where it's such a tedious pain to atlas textures."}, {"timestamp": [405.1, 410.68], "text": " And this is a one-shot solution for that."}, {"timestamp": [410.68, 413.82], "text": " I remember the generic way of doing it"}, {"timestamp": [413.82, 416.5], "text": " is using xatlas and cutting up all the triangles"}, {"timestamp": [416.5, 419.96], "text": " and rearranging them so they become an atlas."}, {"timestamp": [419.96, 420.52], "text": " Yeah."}, {"timestamp": [420.52, 422.94], "text": " That's the generic way."}, {"timestamp": [422.94, 424.84], "text": " Well, we already have the atlas part solved."}, {"timestamp": [420.28, 420.52], "text": " Yeah."}, {"timestamp": [421.4, 422.92], "text": " That's the generic way."}, {"timestamp": [424.94, 428.78], "text": " Well, we already have that last part solved."}, {"timestamp": [433.44, 437.24], "text": " Just figuring out, you know, it doesn't process normals."}, {"timestamp": [439.36, 446.2], "text": " But I can look into that later. Other than that, also been looking at, we got KTX support in the"}, {"timestamp": [446.2, 448.18], "text": " VRM batch"}, {"timestamp": [448.18, 449.84], "text": " processing with Character Studio."}, {"timestamp": [450.14, 451.2], "text": " So I tested it."}, {"timestamp": [451.86, 454.2], "text": " I could optimize a thousand VRMs"}, {"timestamp": [454.2, 456.12], "text": " at a time with"}, {"timestamp": [456.12, 458.04], "text": " KTX too. And we're kind of"}, {"timestamp": [458.04, 459.96], "text": " using a preset of"}, {"timestamp": [459.96, 460.94], "text": " ETC1S."}, {"timestamp": [462.42, 464.12], "text": " It doesn't look so good"}, {"timestamp": [464.12, 466.34], "text": " compared to UATS."}, {"timestamp": [466.48, 467.24], "text": " True, but"}, {"timestamp": [467.24, 468.72], "text": " we had a"}, {"timestamp": [468.72, 472.22], "text": " pathological"}, {"timestamp": [472.22, 473.86], "text": " case of variability."}, {"timestamp": [475.2, 475.86], "text": " It varies."}, {"timestamp": [476.56, 477.18], "text": " You know, like"}, {"timestamp": [477.18, 479.48], "text": " the ETC1S is really"}, {"timestamp": [479.48, 481.88], "text": " forgiving if you've got a stylized avatar,"}, {"timestamp": [482.2, 483.76], "text": " but if you've got something that is"}, {"timestamp": [483.76, 486.2], "text": " realistic looking,"}, {"timestamp": [486.94, 488.16], "text": " the other one might be better."}, {"timestamp": [488.46, 490.02], "text": " But there hasn't been a"}, {"timestamp": [490.02, 492.1], "text": " tool to kind of batch optimize."}, {"timestamp": [493.34, 493.62], "text": " Oh,"}, {"timestamp": [493.62, 495.36], "text": " as far as I know,"}, {"timestamp": [495.78, 496.12], "text": " UAT,"}, {"timestamp": [496.12, 498.46], "text": " UATS,"}, {"timestamp": [498.78, 501.7], "text": " UATS, UASTC"}, {"timestamp": [501.7, 503.82], "text": " is better in all"}, {"timestamp": [503.82, 506.16], "text": " cases except for memory"}, {"timestamp": [506.16, 506.78], "text": " usage."}, {"timestamp": [507.8, 508.62], "text": " And file size."}, {"timestamp": [509.18, 512.1], "text": " But it doesn't"}, {"timestamp": [512.1, 513.92], "text": " have the corruption in"}, {"timestamp": [513.92, 515.9], "text": " normals and color"}, {"timestamp": [515.9, 516.46], "text": " textures."}, {"timestamp": [517.02, 519.98], "text": " So it's good when you've got the case"}, {"timestamp": [519.98, 521.96], "text": " of PBR materials."}, {"timestamp": [522.68, 522.96], "text": " However,"}, {"timestamp": [523.86, 527.98], "text": " in my use cases, file size really mattered"}, {"timestamp": [527.98, 529.0], "text": " because some"}, {"timestamp": [529.0, 532.04], "text": " And stylized, if you have a hard edge,"}, {"timestamp": [532.04, 535.56], "text": " it crops it completely if you have a hard edge"}, {"timestamp": [535.56, 537.76], "text": " in between shading."}, {"timestamp": [537.76, 538.26], "text": " Yeah."}, {"timestamp": [541.04, 545.74], "text": " So I've been working on stuff around VRM optimization tooling."}, {"timestamp": [545.74, 552.1], "text": " I want to do Draco next, but maybe there's..."}, {"timestamp": [552.1, 557.62], "text": " Draco doesn't have enough widespread support at this current time."}, {"timestamp": [558.4, 562.74], "text": " I'm finding that, but while I'm doing this,"}, {"timestamp": [562.84, 566.88], "text": " it's taking some time as well because I'm also talking with platforms"}, {"timestamp": [566.88, 569.5], "text": " because they've had some regressions."}, {"timestamp": [570.42, 575.02], "text": " And even with the KTX implementation of VRMs,"}, {"timestamp": [575.22, 576.58], "text": " it's crazy."}, {"timestamp": [576.58, 581.44], "text": " Like Ant and another dev who had the same exact issue"}, {"timestamp": [581.44, 583.7], "text": " fixed it in like five minutes."}, {"timestamp": [584.16, 586.16], "text": " And some of these other devs,"}, {"timestamp": [586.26, 588.14], "text": " you know, it's been like two weeks"}, {"timestamp": [588.14, 590.22], "text": " of dragged on"}, {"timestamp": [590.22, 591.1], "text": " talks and"}, {"timestamp": [591.1, 593.72], "text": " just"}, {"timestamp": [593.72, 595.92], "text": " back and forth. Is this to enable"}, {"timestamp": [595.92, 598.2], "text": " VRM and BaseSU? Because that's amazing."}, {"timestamp": [598.7, 600.42], "text": " If you can..."}, {"timestamp": [600.42, 602.04], "text": " Are they okay, like, advertising"}, {"timestamp": [602.04, 604.1], "text": " support? It already worked"}, {"timestamp": [604.1, 611.68], "text": " before, but then they released like a V2 of their platform, and then something broke in the pipeline."}, {"timestamp": [612.22, 616.28], "text": " I mean, is it okay to have a list of these platforms that support it?"}, {"timestamp": [616.98, 617.68], "text": " Or is that a problem?"}], "text": " KHR audio and just some thoughts around runtime implementation and how we should be thinking about loading all of the assets before playing audio and sort of like that life cycle. The thing that I was talking about prior to recording was there's an NPM package that OMI manages, and I have rights to it, Robert has rights to it, I can give anyone else in the group that wants, you know, I'm sure there's some vetting process we might have to talk through, but whatever. But I was updating it and then I was like, wait a minute, should I make this decision for somebody? I mean, if they're using this package, they're wanting to use our easy button that just adds a parser to the gltf loader and then adds it to the scene um in a generic way but now i'm like well i kind of feel like this is too opinionated to be like load them all then play because it's assuming a lot of the of the app and how they're doing things like maybe they are downloading everything before they render um yeah i don't know i'm just kind of like thinking out loud there but it's yeah and uh and i'll restate what i stated before the recording started so it's in the recording the way that it works in ghetto engine is that all of the assets required for a scene is loaded at import time so So during the import, it gathers all the audio files that are needed. And then only once everything is gathered and the import is complete is the same instance. And then everything is instance all at once and it plays the audio at the same frame. Interesting. Because the audio stream player in Godlay like the autoplay autoplays when the node is added to the tree oh interesting when it's added to the tree at the time of that huh yeah or it might be it might be when it's ready or or something so like it might be a frame after it's added to the tree you know yeah and see and that's the thing where i was like i the logic that i worked out was get get all of the audio files together and then at the moment that everything is ready to go play at the same time and it keeps it keeps the tracks together and if you put them on loop they they stay together and play forever uh and it makes really cool spatial songs, like performances and things like that. Yeah. I don't know. It's been a fun experiment. But nothing really fruitful for us to ship, but I'm thinking about it. Now that I know, I think that's the expected behavior, is wait for everything to come into the browser and then do things with it. Cool. Oh, another audio thing I was thinking through. I think we lost fire, so I'll wait. Well, we'll talk about it anyway. I've been building, just like in my free time as kind of a hobby, a speaker cabinet. And I've been doing a ton of research into it and, like, what plays into sound and what matters when you build these things. And one of the things that I found really interesting is if you have a fully closed back to your speaker cabinet, if you have a fully closed back to your speaker cabinet, all of the screws that tighten it in there, just tightening those changes the tone of the sound. And I was just like, wow, that's really interesting to think about audio in 3D worlds. And what does it mean that audio exists in a space? And I think the answer is something like we were talking about reverb effects in extensions. And yeah, I just thought that was kind of an interesting, I guess, real-life realization that audio changes when things like just tightening a screw on a container. And so it's like physics audio. And I was just trying to think, like, what does that mean for the web and how could we do something like that? I don't think there really is because you'd have to make, like, living patches of synthesizers and things. But, yeah, fun thought. It's so beautiful. Can you hear me? Hello? Yeah, what up? Yeah. Hey. I don't know, not really GLTF extension related, but I accidentally kind of, well, kind of already knew, but was kind of surprised as well that a tool originally made for optimizing VRMs is also really good at just GLTFs as well. Is there any normal map generator you all know about, or process for such? I'm just kind of thinking. What do you mean normal map? You mean UV map or normal vectors on vertices? I will link something in the extensions. I think you're talking UV. You're saying combine everything into one single UV and make that one image, like atlasing almost? Like take a base color, or albedo, or whatever you want to call it, texture, and generate a normal map. You first have to make it into an atlas, and then. That's what the tool does already. Okay. Which one is it? I think I'm understanding then. Which one is it? The tool? Character Studio. Cool. Now we're implementing drag-and-drop GLTF support. And it's going to be a lot of work to implement glTF transform unless we figure out some other way to daisy chain it. It is a certain number of days until that will be solved. I don't know if that influences anything, but I'm definitely going to do it if somebody else doesn't do it before me. I'd rather find ways to not write anything redundant and just find ways to compose with other people's efforts. But there's a gap in the workflow where it's such a tedious pain to atlas textures. And this is a one-shot solution for that. I remember the generic way of doing it is using xatlas and cutting up all the triangles and rearranging them so they become an atlas. Yeah. That's the generic way. Well, we already have the atlas part solved. Yeah. That's the generic way. Well, we already have that last part solved. Just figuring out, you know, it doesn't process normals. But I can look into that later. Other than that, also been looking at, we got KTX support in the VRM batch processing with Character Studio. So I tested it. I could optimize a thousand VRMs at a time with KTX too. And we're kind of using a preset of ETC1S. It doesn't look so good compared to UATS. True, but we had a pathological case of variability. It varies. You know, like the ETC1S is really forgiving if you've got a stylized avatar, but if you've got something that is realistic looking, the other one might be better. But there hasn't been a tool to kind of batch optimize. Oh, as far as I know, UAT, UATS, UATS, UASTC is better in all cases except for memory usage. And file size. But it doesn't have the corruption in normals and color textures. So it's good when you've got the case of PBR materials. However, in my use cases, file size really mattered because some And stylized, if you have a hard edge, it crops it completely if you have a hard edge in between shading. Yeah. So I've been working on stuff around VRM optimization tooling. I want to do Draco next, but maybe there's... Draco doesn't have enough widespread support at this current time. I'm finding that, but while I'm doing this, it's taking some time as well because I'm also talking with platforms because they've had some regressions. And even with the KTX implementation of VRMs, it's crazy. Like Ant and another dev who had the same exact issue fixed it in like five minutes. And some of these other devs, you know, it's been like two weeks of dragged on talks and just back and forth. Is this to enable VRM and BaseSU? Because that's amazing. If you can... Are they okay, like, advertising support? It already worked before, but then they released like a V2 of their platform, and then something broke in the pipeline. I mean, is it okay to have a list of these platforms that support it? Or is that a problem?"}